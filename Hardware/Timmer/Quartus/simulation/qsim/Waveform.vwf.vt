// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "07/06/2021 20:49:28"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Timmer
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Timmer_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clock;
reg Pause;
reg Reset;
reg Start;
reg [15:0] Tiempo;
// wires                                               
wire Busy;

// assign statements (if any)                          
Timmer i1 (
// port map - connection between master ports and signals/registers   
	.Busy(Busy),
	.Clock(Clock),
	.Pause(Pause),
	.Reset(Reset),
	.Start(Start),
	.Tiempo(Tiempo)
);
initial 
begin 
#100000000 $finish;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #20000 1'b1;
	#20000;
end 

// Pause
initial
begin
	Pause = 1'b0;
	Pause = #9600000 1'b1;
	Pause = #640000 1'b0;
	Pause = #11520000 1'b1;
	Pause = #640000 1'b0;
	Pause = #30720000 1'b1;
	Pause = #40960000 1'b0;
end 

// Reset
initial
begin
	Reset = 1'b0;
end 

// Start
initial
begin
	Start = 1'b0;
	Start = #3840000 1'b1;
	Start = #640000 1'b0;
	Start = #9600000 1'b1;
	Start = #640000 1'b0;
	Start = #7040000 1'b1;
	Start = #640000 1'b0;
	Start = #13440000 1'b1;
	Start = #22400000 1'b0;
end 
// Tiempo[ 15 ]
initial
begin
	Tiempo[15] = 1'b0;
end 
// Tiempo[ 14 ]
initial
begin
	Tiempo[14] = 1'b0;
end 
// Tiempo[ 13 ]
initial
begin
	Tiempo[13] = 1'b0;
end 
// Tiempo[ 12 ]
initial
begin
	Tiempo[12] = 1'b0;
end 
// Tiempo[ 11 ]
initial
begin
	Tiempo[11] = 1'b0;
end 
// Tiempo[ 10 ]
initial
begin
	Tiempo[10] = 1'b0;
end 
// Tiempo[ 9 ]
initial
begin
	Tiempo[9] = 1'b0;
end 
// Tiempo[ 8 ]
initial
begin
	Tiempo[8] = 1'b1;
end 
// Tiempo[ 7 ]
initial
begin
	Tiempo[7] = 1'b0;
end 
// Tiempo[ 6 ]
initial
begin
	Tiempo[6] = 1'b0;
end 
// Tiempo[ 5 ]
initial
begin
	Tiempo[5] = 1'b0;
end 
// Tiempo[ 4 ]
initial
begin
	Tiempo[4] = 1'b0;
end 
// Tiempo[ 3 ]
initial
begin
	Tiempo[3] = 1'b0;
end 
// Tiempo[ 2 ]
initial
begin
	Tiempo[2] = 1'b0;
end 
// Tiempo[ 1 ]
initial
begin
	Tiempo[1] = 1'b0;
end 
// Tiempo[ 0 ]
initial
begin
	Tiempo[0] = 1'b0;
end 
endmodule

