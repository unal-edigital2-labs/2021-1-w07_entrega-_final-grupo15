// Copyright (C) 2020  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and any partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details, at
// https://fpgasoftware.intel.com/eula.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "05/15/2021 17:17:32"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Servomotor
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Servomotor_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [11:0] Ciclo;
reg Clock;
reg [15:0] Periodo;
// wires                                               
wire Out;

// assign statements (if any)                          
Servomotor i1 (
// port map - connection between master ports and signals/registers   
	.Ciclo(Ciclo),
	.Clock(Clock),
	.Out(Out),
	.Periodo(Periodo)
);
initial 
begin 
#1000000 $stop;
end 
// Ciclo[ 11 ]
initial
begin
	Ciclo[11] = 1'b0;
end 
// Ciclo[ 10 ]
initial
begin
	Ciclo[10] = 1'b0;
end 
// Ciclo[ 9 ]
initial
begin
	Ciclo[9] = 1'b0;
end 
// Ciclo[ 8 ]
initial
begin
	Ciclo[8] = 1'b0;
end 
// Ciclo[ 7 ]
initial
begin
	Ciclo[7] = 1'b0;
end 
// Ciclo[ 6 ]
initial
begin
	Ciclo[6] = 1'b0;
end 
// Ciclo[ 5 ]
initial
begin
	Ciclo[5] = 1'b0;
end 
// Ciclo[ 4 ]
initial
begin
	Ciclo[4] = 1'b0;
end 
// Ciclo[ 3 ]
initial
begin
	Ciclo[3] = 1'b0;
end 
// Ciclo[ 2 ]
initial
begin
	Ciclo[2] = 1'b0;
end 
// Ciclo[ 1 ]
initial
begin
	Ciclo[1] = 1'b0;
end 
// Ciclo[ 0 ]
initial
begin
	Ciclo[0] = 1'b0;
end 

// Clock
always
begin
	Clock = 1'b0;
	Clock = #1000 1'b1;
	#1000;
end 
// Periodo[ 15 ]
initial
begin
	Periodo[15] = 1'b0;
end 
// Periodo[ 14 ]
initial
begin
	Periodo[14] = 1'b0;
end 
// Periodo[ 13 ]
initial
begin
	Periodo[13] = 1'b0;
end 
// Periodo[ 12 ]
initial
begin
	Periodo[12] = 1'b0;
end 
// Periodo[ 11 ]
initial
begin
	Periodo[11] = 1'b0;
end 
// Periodo[ 10 ]
initial
begin
	Periodo[10] = 1'b0;
end 
// Periodo[ 9 ]
initial
begin
	Periodo[9] = 1'b0;
end 
// Periodo[ 8 ]
initial
begin
	Periodo[8] = 1'b0;
end 
// Periodo[ 7 ]
initial
begin
	Periodo[7] = 1'b0;
end 
// Periodo[ 6 ]
initial
begin
	Periodo[6] = 1'b0;
end 
// Periodo[ 5 ]
initial
begin
	Periodo[5] = 1'b0;
end 
// Periodo[ 4 ]
initial
begin
	Periodo[4] = 1'b0;
end 
// Periodo[ 3 ]
initial
begin
	Periodo[3] = 1'b0;
end 
// Periodo[ 2 ]
initial
begin
	Periodo[2] = 1'b0;
end 
// Periodo[ 1 ]
initial
begin
	Periodo[1] = 1'b0;
end 
// Periodo[ 0 ]
initial
begin
	Periodo[0] = 1'b0;
end 
endmodule

