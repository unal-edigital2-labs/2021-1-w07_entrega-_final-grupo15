//--------------------------------------------------------------------------------
// Auto-generated by Migen (3ffd64c) & LiteX (23afca3d) on 2021-08-02 19:41:31
//--------------------------------------------------------------------------------
module nexys4ddr(
	output reg serial_tx,
	input wire serial_rx,
	input wire clk,
	input wire cpu_reset,
	input wire btnc,
	input wire btnr,
	input wire btnl,
	output wire servo_out,
	output wire trigger,
	input wire echo,
	input wire infrarojoc,
	input wire infrarojor,
	input wire infrarojol,
	output wire motorA0,
	output wire motorA1,
	output wire motorB0,
	output wire motorB1,
	output wire pwm1,
	output wire pwm2,
	input wire Aclock0,
	output wire vsync0,
	output wire hsync0,
	output wire vga0,
	output wire vga1,
	output wire vga2,
	output wire vga3,
	output wire vga4,
	output wire vga5,
	output wire vga6,
	output wire vga7,
	output wire vga8,
	output wire vga9,
	output wire vga10,
	output wire vga11,
	output wire XClock0,
	input wire Data0,
	input wire Data1,
	input wire Data2,
	input wire Data3,
	input wire Data4,
	input wire Data5,
	input wire Data6,
	input wire Data7,
	input wire Vsync_cam0,
	input wire Href0,
	input wire UARTB10,
	output wire UARTB11,
	input wire UARTA10,
	output wire UARTA11
);

reg soc_rst = 1'd0;
wire cpu_rst;
reg [1:0] reset_storage = 2'd0;
reg reset_re = 1'd0;
reg [31:0] scratch_storage = 32'd305419896;
reg scratch_re = 1'd0;
wire [31:0] bus_errors_status;
wire bus_errors_we;
reg bus_errors_re = 1'd0;
wire bus_error;
reg [31:0] bus_errors = 32'd0;
wire picorv32_trap;
wire picorv32_reset;
reg [31:0] picorv32_interrupt = 32'd0;
wire [29:0] picorv32_idbus_adr;
wire [31:0] picorv32_idbus_dat_w;
wire [31:0] picorv32_idbus_dat_r;
wire [3:0] picorv32_idbus_sel;
wire picorv32_idbus_cyc;
wire picorv32_idbus_stb;
wire picorv32_idbus_ack;
wire picorv32_idbus_we;
wire [2:0] picorv32_idbus_cti;
wire [1:0] picorv32_idbus_bte;
wire picorv32_idbus_err;
wire picorv32_mem_valid;
wire picorv32_mem_instr;
wire picorv32_mem_ready;
wire [31:0] picorv32_mem_addr;
wire [31:0] picorv32_mem_wdata;
wire [3:0] picorv32_mem_wstrb;
wire [31:0] picorv32_mem_rdata;
wire picorv320;
wire picorv321;
wire [31:0] picorv322;
wire [31:0] picorv323;
wire [3:0] picorv324;
wire picorv325;
wire [31:0] picorv326;
wire [31:0] picorv327;
wire [31:0] picorv328;
wire [31:0] picorv329;
wire [29:0] ram_bus_adr;
wire [31:0] ram_bus_dat_w;
wire [31:0] ram_bus_dat_r;
wire [3:0] ram_bus_sel;
wire ram_bus_cyc;
wire ram_bus_stb;
reg ram_bus_ack = 1'd0;
wire ram_bus_we;
wire [2:0] ram_bus_cti;
wire [1:0] ram_bus_bte;
reg ram_bus_err = 1'd0;
wire [12:0] adr;
wire [31:0] dat_r;
wire [29:0] interface0_ram_bus_adr;
wire [31:0] interface0_ram_bus_dat_w;
wire [31:0] interface0_ram_bus_dat_r;
wire [3:0] interface0_ram_bus_sel;
wire interface0_ram_bus_cyc;
wire interface0_ram_bus_stb;
reg interface0_ram_bus_ack = 1'd0;
wire interface0_ram_bus_we;
wire [2:0] interface0_ram_bus_cti;
wire [1:0] interface0_ram_bus_bte;
reg interface0_ram_bus_err = 1'd0;
wire [10:0] sram0_adr;
wire [31:0] sram0_dat_r;
reg [3:0] sram0_we = 4'd0;
wire [31:0] sram0_dat_w;
wire [29:0] interface1_ram_bus_adr;
wire [31:0] interface1_ram_bus_dat_w;
wire [31:0] interface1_ram_bus_dat_r;
wire [3:0] interface1_ram_bus_sel;
wire interface1_ram_bus_cyc;
wire interface1_ram_bus_stb;
reg interface1_ram_bus_ack = 1'd0;
wire interface1_ram_bus_we;
wire [2:0] interface1_ram_bus_cti;
wire [1:0] interface1_ram_bus_bte;
reg interface1_ram_bus_err = 1'd0;
wire [11:0] sram1_adr;
wire [31:0] sram1_dat_r;
reg [3:0] sram1_we = 4'd0;
wire [31:0] sram1_dat_w;
wire tx_sink_valid;
reg tx_sink_ready = 1'd0;
wire tx_sink_first;
wire tx_sink_last;
wire [7:0] tx_sink_payload_data;
reg [7:0] tx_data = 8'd0;
reg [3:0] tx_count = 4'd0;
reg tx_enable = 1'd0;
reg tx_tick = 1'd0;
reg [31:0] tx_phase = 32'd0;
reg rx_source_valid = 1'd0;
wire rx_source_ready;
reg rx_source_first = 1'd0;
reg rx_source_last = 1'd0;
reg [7:0] rx_source_payload_data = 8'd0;
reg [7:0] rx_data = 8'd0;
reg [3:0] rx_count = 4'd0;
reg rx_enable = 1'd0;
reg rx_tick = 1'd0;
reg [31:0] rx_phase = 32'd0;
wire rx_rx;
reg rx_rx_d = 1'd0;
reg uart_rxtx_re = 1'd0;
wire [7:0] uart_rxtx_r;
reg uart_rxtx_we = 1'd0;
wire [7:0] uart_rxtx_w;
wire uart_txfull_status;
wire uart_txfull_we;
reg uart_txfull_re = 1'd0;
wire uart_rxempty_status;
wire uart_rxempty_we;
reg uart_rxempty_re = 1'd0;
wire uart_irq;
wire uart_tx_status;
reg uart_tx_pending = 1'd0;
wire uart_tx_trigger;
reg uart_tx_clear = 1'd0;
reg uart_tx_trigger_d = 1'd0;
wire uart_rx_status;
reg uart_rx_pending = 1'd0;
wire uart_rx_trigger;
reg uart_rx_clear = 1'd0;
reg uart_rx_trigger_d = 1'd0;
wire uart_tx0;
wire uart_rx0;
reg [1:0] uart_status_status = 2'd0;
wire uart_status_we;
reg uart_status_re = 1'd0;
wire uart_tx1;
wire uart_rx1;
reg [1:0] uart_pending_status = 2'd0;
wire uart_pending_we;
reg uart_pending_re = 1'd0;
reg [1:0] uart_pending_r = 2'd0;
wire uart_tx2;
wire uart_rx2;
reg [1:0] uart_enable_storage = 2'd0;
reg uart_enable_re = 1'd0;
wire uart_txempty_status;
wire uart_txempty_we;
reg uart_txempty_re = 1'd0;
wire uart_rxfull_status;
wire uart_rxfull_we;
reg uart_rxfull_re = 1'd0;
wire uart_uart_sink_valid;
wire uart_uart_sink_ready;
wire uart_uart_sink_first;
wire uart_uart_sink_last;
wire [7:0] uart_uart_sink_payload_data;
wire uart_uart_source_valid;
wire uart_uart_source_ready;
wire uart_uart_source_first;
wire uart_uart_source_last;
wire [7:0] uart_uart_source_payload_data;
wire uart_tx_fifo_sink_valid;
wire uart_tx_fifo_sink_ready;
reg uart_tx_fifo_sink_first = 1'd0;
reg uart_tx_fifo_sink_last = 1'd0;
wire [7:0] uart_tx_fifo_sink_payload_data;
wire uart_tx_fifo_source_valid;
wire uart_tx_fifo_source_ready;
wire uart_tx_fifo_source_first;
wire uart_tx_fifo_source_last;
wire [7:0] uart_tx_fifo_source_payload_data;
wire uart_tx_fifo_re;
reg uart_tx_fifo_readable = 1'd0;
wire uart_tx_fifo_syncfifo_we;
wire uart_tx_fifo_syncfifo_writable;
wire uart_tx_fifo_syncfifo_re;
wire uart_tx_fifo_syncfifo_readable;
wire [9:0] uart_tx_fifo_syncfifo_din;
wire [9:0] uart_tx_fifo_syncfifo_dout;
reg [4:0] uart_tx_fifo_level0 = 5'd0;
reg uart_tx_fifo_replace = 1'd0;
reg [3:0] uart_tx_fifo_produce = 4'd0;
reg [3:0] uart_tx_fifo_consume = 4'd0;
reg [3:0] uart_tx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_tx_fifo_wrport_dat_r;
wire uart_tx_fifo_wrport_we;
wire [9:0] uart_tx_fifo_wrport_dat_w;
wire uart_tx_fifo_do_read;
wire [3:0] uart_tx_fifo_rdport_adr;
wire [9:0] uart_tx_fifo_rdport_dat_r;
wire uart_tx_fifo_rdport_re;
wire [4:0] uart_tx_fifo_level1;
wire [7:0] uart_tx_fifo_fifo_in_payload_data;
wire uart_tx_fifo_fifo_in_first;
wire uart_tx_fifo_fifo_in_last;
wire [7:0] uart_tx_fifo_fifo_out_payload_data;
wire uart_tx_fifo_fifo_out_first;
wire uart_tx_fifo_fifo_out_last;
wire uart_rx_fifo_sink_valid;
wire uart_rx_fifo_sink_ready;
wire uart_rx_fifo_sink_first;
wire uart_rx_fifo_sink_last;
wire [7:0] uart_rx_fifo_sink_payload_data;
wire uart_rx_fifo_source_valid;
wire uart_rx_fifo_source_ready;
wire uart_rx_fifo_source_first;
wire uart_rx_fifo_source_last;
wire [7:0] uart_rx_fifo_source_payload_data;
wire uart_rx_fifo_re;
reg uart_rx_fifo_readable = 1'd0;
wire uart_rx_fifo_syncfifo_we;
wire uart_rx_fifo_syncfifo_writable;
wire uart_rx_fifo_syncfifo_re;
wire uart_rx_fifo_syncfifo_readable;
wire [9:0] uart_rx_fifo_syncfifo_din;
wire [9:0] uart_rx_fifo_syncfifo_dout;
reg [4:0] uart_rx_fifo_level0 = 5'd0;
reg uart_rx_fifo_replace = 1'd0;
reg [3:0] uart_rx_fifo_produce = 4'd0;
reg [3:0] uart_rx_fifo_consume = 4'd0;
reg [3:0] uart_rx_fifo_wrport_adr = 4'd0;
wire [9:0] uart_rx_fifo_wrport_dat_r;
wire uart_rx_fifo_wrport_we;
wire [9:0] uart_rx_fifo_wrport_dat_w;
wire uart_rx_fifo_do_read;
wire [3:0] uart_rx_fifo_rdport_adr;
wire [9:0] uart_rx_fifo_rdport_dat_r;
wire uart_rx_fifo_rdport_re;
wire [4:0] uart_rx_fifo_level1;
wire [7:0] uart_rx_fifo_fifo_in_payload_data;
wire uart_rx_fifo_fifo_in_first;
wire uart_rx_fifo_fifo_in_last;
wire [7:0] uart_rx_fifo_fifo_out_payload_data;
wire uart_rx_fifo_fifo_out_first;
wire uart_rx_fifo_fifo_out_last;
reg [31:0] timer_load_storage = 32'd0;
reg timer_load_re = 1'd0;
reg [31:0] timer_reload_storage = 32'd0;
reg timer_reload_re = 1'd0;
reg timer_en_storage = 1'd0;
reg timer_en_re = 1'd0;
reg timer_update_value_storage = 1'd0;
reg timer_update_value_re = 1'd0;
reg [31:0] timer_value_status = 32'd0;
wire timer_value_we;
reg timer_value_re = 1'd0;
wire timer_irq;
wire timer_zero_status;
reg timer_zero_pending = 1'd0;
wire timer_zero_trigger;
reg timer_zero_clear = 1'd0;
reg timer_zero_trigger_d = 1'd0;
wire timer_zero0;
wire timer_status_status;
wire timer_status_we;
reg timer_status_re = 1'd0;
wire timer_zero1;
wire timer_pending_status;
wire timer_pending_we;
reg timer_pending_re = 1'd0;
reg timer_pending_r = 1'd0;
wire timer_zero2;
reg timer_enable_storage = 1'd0;
reg timer_enable_re = 1'd0;
reg [31:0] timer_value = 32'd0;
wire sys_clk;
wire sys_rst;
wire por_clk;
reg int_rst = 1'd1;
wire [2:0] buttons_status;
wire buttons_we;
reg buttons_re = 1'd0;
reg servo_cntrl_enable_storage = 1'd0;
reg servo_cntrl_enable_re = 1'd0;
reg [15:0] servo_cntrl_dutty_storage = 16'd0;
reg servo_cntrl_dutty_re = 1'd0;
reg [15:0] servo_cntrl_period_storage = 16'd0;
reg servo_cntrl_period_re = 1'd0;
reg init_storage = 1'd0;
reg init_re = 1'd0;
wire [15:0] tiempo_status;
wire tiempo_we;
reg tiempo_re = 1'd0;
wire done_status;
wire done_we;
reg done_re = 1'd0;
wire [2:0] infrarojo_status;
wire infrarojo_we;
reg infrarojo_re = 1'd0;
reg [2:0] motores_storage = 3'd0;
reg motores_re = 1'd0;
wire [1:0] Forma_status;
wire Forma_we;
reg Forma_re = 1'd0;
wire [1:0] PromedioColor_status;
wire PromedioColor_we;
reg PromedioColor_re = 1'd0;
reg [3:0] MapaData_storage = 4'd0;
reg MapaData_re = 1'd0;
reg [5:0] MapaAddr_storage = 6'd0;
reg MapaAddr_re = 1'd0;
reg MapaWrite_storage = 1'd0;
reg MapaWrite_re = 1'd0;
reg [15:0] UARTB_Baudios_storage = 16'd0;
reg UARTB_Baudios_re = 1'd0;
reg UARTB_TxInit_storage = 1'd0;
reg UARTB_TxInit_re = 1'd0;
reg [7:0] UARTB_TxData_storage = 8'd0;
reg UARTB_TxData_re = 1'd0;
wire [7:0] UARTB_RxData_status;
wire UARTB_RxData_we;
reg UARTB_RxData_re = 1'd0;
wire UARTB_TxDone_status;
wire UARTB_TxDone_we;
reg UARTB_TxDone_re = 1'd0;
wire UARTB_RxAvailable_status;
wire UARTB_RxAvailable_we;
reg UARTB_RxAvailable_re = 1'd0;
wire UARTB_irq;
wire UARTB_TXDONE_status;
reg UARTB_TXDONE_pending = 1'd0;
wire UARTB_TXDONE_trigger;
reg UARTB_TXDONE_clear = 1'd0;
reg UARTB_TXDONE_trigger_d = 1'd0;
wire UARTB_RXAVAILABLE_status;
reg UARTB_RXAVAILABLE_pending = 1'd0;
wire UARTB_RXAVAILABLE_trigger;
reg UARTB_RXAVAILABLE_clear = 1'd0;
reg UARTB_RXAVAILABLE_trigger_d = 1'd0;
wire UARTB_TXDONE0;
wire UARTB_RXAVAILABLE0;
reg [1:0] UARTB_status_status = 2'd0;
wire UARTB_status_we;
reg UARTB_status_re = 1'd0;
wire UARTB_TXDONE1;
wire UARTB_RXAVAILABLE1;
reg [1:0] UARTB_pending_status = 2'd0;
wire UARTB_pending_we;
reg UARTB_pending_re = 1'd0;
reg [1:0] UARTB_pending_r = 2'd0;
wire UARTB_TXDONE2;
wire UARTB_RXAVAILABLE2;
reg [1:0] UARTB_enable_storage = 2'd0;
reg UARTB_enable_re = 1'd0;
reg [15:0] UARTA_Baudios_storage = 16'd0;
reg UARTA_Baudios_re = 1'd0;
reg UARTA_TxInit_storage = 1'd0;
reg UARTA_TxInit_re = 1'd0;
reg [7:0] UARTA_TxData_storage = 8'd0;
reg UARTA_TxData_re = 1'd0;
wire [7:0] UARTA_RxData_status;
wire UARTA_RxData_we;
reg UARTA_RxData_re = 1'd0;
wire UARTA_TxDone_status;
wire UARTA_TxDone_we;
reg UARTA_TxDone_re = 1'd0;
wire UARTA_RxAvailable_status;
wire UARTA_RxAvailable_we;
reg UARTA_RxAvailable_re = 1'd0;
wire UARTA_irq;
wire UARTA_TXDONE_status;
reg UARTA_TXDONE_pending = 1'd0;
wire UARTA_TXDONE_trigger;
reg UARTA_TXDONE_clear = 1'd0;
reg UARTA_TXDONE_trigger_d = 1'd0;
wire UARTA_RXAVAILABLE_status;
reg UARTA_RXAVAILABLE_pending = 1'd0;
wire UARTA_RXAVAILABLE_trigger;
reg UARTA_RXAVAILABLE_clear = 1'd0;
reg UARTA_RXAVAILABLE_trigger_d = 1'd0;
wire UARTA_TXDONE0;
wire UARTA_RXAVAILABLE0;
reg [1:0] UARTA_status_status = 2'd0;
wire UARTA_status_we;
reg UARTA_status_re = 1'd0;
wire UARTA_TXDONE1;
wire UARTA_RXAVAILABLE1;
reg [1:0] UARTA_pending_status = 2'd0;
wire UARTA_pending_we;
reg UARTA_pending_re = 1'd0;
reg [1:0] UARTA_pending_r = 2'd0;
wire UARTA_TXDONE2;
wire UARTA_RXAVAILABLE2;
reg [1:0] UARTA_enable_storage = 2'd0;
reg UARTA_enable_re = 1'd0;
reg rs232phytx_state = 1'd0;
reg rs232phytx_next_state = 1'd0;
reg [3:0] tx_count_rs232phytx_next_value0 = 4'd0;
reg tx_count_rs232phytx_next_value_ce0 = 1'd0;
reg serial_tx_rs232phytx_next_value1 = 1'd0;
reg serial_tx_rs232phytx_next_value_ce1 = 1'd0;
reg [7:0] tx_data_rs232phytx_next_value2 = 8'd0;
reg tx_data_rs232phytx_next_value_ce2 = 1'd0;
reg rs232phyrx_state = 1'd0;
reg rs232phyrx_next_state = 1'd0;
reg [3:0] rx_count_rs232phyrx_next_value0 = 4'd0;
reg rx_count_rs232phyrx_next_value_ce0 = 1'd0;
reg [7:0] rx_data_rs232phyrx_next_value1 = 8'd0;
reg rx_data_rs232phyrx_next_value_ce1 = 1'd0;
reg [13:0] basesoc_adr = 14'd0;
reg basesoc_we = 1'd0;
reg [31:0] basesoc_dat_w = 32'd0;
wire [31:0] basesoc_dat_r;
wire [29:0] basesoc_wishbone_adr;
wire [31:0] basesoc_wishbone_dat_w;
reg [31:0] basesoc_wishbone_dat_r = 32'd0;
wire [3:0] basesoc_wishbone_sel;
wire basesoc_wishbone_cyc;
wire basesoc_wishbone_stb;
reg basesoc_wishbone_ack = 1'd0;
wire basesoc_wishbone_we;
wire [2:0] basesoc_wishbone_cti;
wire [1:0] basesoc_wishbone_bte;
reg basesoc_wishbone_err = 1'd0;
wire [29:0] shared_adr;
wire [31:0] shared_dat_w;
reg [31:0] shared_dat_r = 32'd0;
wire [3:0] shared_sel;
wire shared_cyc;
wire shared_stb;
reg shared_ack = 1'd0;
wire shared_we;
wire [2:0] shared_cti;
wire [1:0] shared_bte;
wire shared_err;
wire request;
wire grant;
reg [3:0] slave_sel = 4'd0;
reg [3:0] slave_sel_r = 4'd0;
reg error = 1'd0;
wire wait_1;
wire done;
reg [19:0] count = 20'd1000000;
wire [13:0] interface0_bank_bus_adr;
wire interface0_bank_bus_we;
wire [31:0] interface0_bank_bus_dat_w;
reg [31:0] interface0_bank_bus_dat_r = 32'd0;
reg csrbank0_Baudios0_re = 1'd0;
wire [15:0] csrbank0_Baudios0_r;
reg csrbank0_Baudios0_we = 1'd0;
wire [15:0] csrbank0_Baudios0_w;
reg csrbank0_TxInit0_re = 1'd0;
wire csrbank0_TxInit0_r;
reg csrbank0_TxInit0_we = 1'd0;
wire csrbank0_TxInit0_w;
reg csrbank0_TxData0_re = 1'd0;
wire [7:0] csrbank0_TxData0_r;
reg csrbank0_TxData0_we = 1'd0;
wire [7:0] csrbank0_TxData0_w;
reg csrbank0_RxData_re = 1'd0;
wire [7:0] csrbank0_RxData_r;
reg csrbank0_RxData_we = 1'd0;
wire [7:0] csrbank0_RxData_w;
reg csrbank0_TxDone_re = 1'd0;
wire csrbank0_TxDone_r;
reg csrbank0_TxDone_we = 1'd0;
wire csrbank0_TxDone_w;
reg csrbank0_RxAvailable_re = 1'd0;
wire csrbank0_RxAvailable_r;
reg csrbank0_RxAvailable_we = 1'd0;
wire csrbank0_RxAvailable_w;
reg csrbank0_ev_status_re = 1'd0;
wire [1:0] csrbank0_ev_status_r;
reg csrbank0_ev_status_we = 1'd0;
wire [1:0] csrbank0_ev_status_w;
reg csrbank0_ev_pending_re = 1'd0;
wire [1:0] csrbank0_ev_pending_r;
reg csrbank0_ev_pending_we = 1'd0;
wire [1:0] csrbank0_ev_pending_w;
reg csrbank0_ev_enable0_re = 1'd0;
wire [1:0] csrbank0_ev_enable0_r;
reg csrbank0_ev_enable0_we = 1'd0;
wire [1:0] csrbank0_ev_enable0_w;
wire csrbank0_sel;
wire [13:0] interface1_bank_bus_adr;
wire interface1_bank_bus_we;
wire [31:0] interface1_bank_bus_dat_w;
reg [31:0] interface1_bank_bus_dat_r = 32'd0;
reg csrbank1_Baudios0_re = 1'd0;
wire [15:0] csrbank1_Baudios0_r;
reg csrbank1_Baudios0_we = 1'd0;
wire [15:0] csrbank1_Baudios0_w;
reg csrbank1_TxInit0_re = 1'd0;
wire csrbank1_TxInit0_r;
reg csrbank1_TxInit0_we = 1'd0;
wire csrbank1_TxInit0_w;
reg csrbank1_TxData0_re = 1'd0;
wire [7:0] csrbank1_TxData0_r;
reg csrbank1_TxData0_we = 1'd0;
wire [7:0] csrbank1_TxData0_w;
reg csrbank1_RxData_re = 1'd0;
wire [7:0] csrbank1_RxData_r;
reg csrbank1_RxData_we = 1'd0;
wire [7:0] csrbank1_RxData_w;
reg csrbank1_TxDone_re = 1'd0;
wire csrbank1_TxDone_r;
reg csrbank1_TxDone_we = 1'd0;
wire csrbank1_TxDone_w;
reg csrbank1_RxAvailable_re = 1'd0;
wire csrbank1_RxAvailable_r;
reg csrbank1_RxAvailable_we = 1'd0;
wire csrbank1_RxAvailable_w;
reg csrbank1_ev_status_re = 1'd0;
wire [1:0] csrbank1_ev_status_r;
reg csrbank1_ev_status_we = 1'd0;
wire [1:0] csrbank1_ev_status_w;
reg csrbank1_ev_pending_re = 1'd0;
wire [1:0] csrbank1_ev_pending_r;
reg csrbank1_ev_pending_we = 1'd0;
wire [1:0] csrbank1_ev_pending_w;
reg csrbank1_ev_enable0_re = 1'd0;
wire [1:0] csrbank1_ev_enable0_r;
reg csrbank1_ev_enable0_we = 1'd0;
wire [1:0] csrbank1_ev_enable0_w;
wire csrbank1_sel;
wire [13:0] interface2_bank_bus_adr;
wire interface2_bank_bus_we;
wire [31:0] interface2_bank_bus_dat_w;
reg [31:0] interface2_bank_bus_dat_r = 32'd0;
reg csrbank2_Forma_re = 1'd0;
wire [1:0] csrbank2_Forma_r;
reg csrbank2_Forma_we = 1'd0;
wire [1:0] csrbank2_Forma_w;
reg csrbank2_PromedioColor_re = 1'd0;
wire [1:0] csrbank2_PromedioColor_r;
reg csrbank2_PromedioColor_we = 1'd0;
wire [1:0] csrbank2_PromedioColor_w;
reg csrbank2_MapaData0_re = 1'd0;
wire [3:0] csrbank2_MapaData0_r;
reg csrbank2_MapaData0_we = 1'd0;
wire [3:0] csrbank2_MapaData0_w;
reg csrbank2_MapaAddr0_re = 1'd0;
wire [5:0] csrbank2_MapaAddr0_r;
reg csrbank2_MapaAddr0_we = 1'd0;
wire [5:0] csrbank2_MapaAddr0_w;
reg csrbank2_MapaWrite0_re = 1'd0;
wire csrbank2_MapaWrite0_r;
reg csrbank2_MapaWrite0_we = 1'd0;
wire csrbank2_MapaWrite0_w;
wire csrbank2_sel;
wire [13:0] interface3_bank_bus_adr;
wire interface3_bank_bus_we;
wire [31:0] interface3_bank_bus_dat_w;
reg [31:0] interface3_bank_bus_dat_r = 32'd0;
reg csrbank3_in_re = 1'd0;
wire [2:0] csrbank3_in_r;
reg csrbank3_in_we = 1'd0;
wire [2:0] csrbank3_in_w;
wire csrbank3_sel;
wire [13:0] interface4_bank_bus_adr;
wire interface4_bank_bus_we;
wire [31:0] interface4_bank_bus_dat_w;
reg [31:0] interface4_bank_bus_dat_r = 32'd0;
reg csrbank4_reset0_re = 1'd0;
wire [1:0] csrbank4_reset0_r;
reg csrbank4_reset0_we = 1'd0;
wire [1:0] csrbank4_reset0_w;
reg csrbank4_scratch0_re = 1'd0;
wire [31:0] csrbank4_scratch0_r;
reg csrbank4_scratch0_we = 1'd0;
wire [31:0] csrbank4_scratch0_w;
reg csrbank4_bus_errors_re = 1'd0;
wire [31:0] csrbank4_bus_errors_r;
reg csrbank4_bus_errors_we = 1'd0;
wire [31:0] csrbank4_bus_errors_w;
wire csrbank4_sel;
wire [13:0] interface5_bank_bus_adr;
wire interface5_bank_bus_we;
wire [31:0] interface5_bank_bus_dat_w;
reg [31:0] interface5_bank_bus_dat_r = 32'd0;
reg csrbank5_in_re = 1'd0;
wire [2:0] csrbank5_in_r;
reg csrbank5_in_we = 1'd0;
wire [2:0] csrbank5_in_w;
wire csrbank5_sel;
wire [13:0] interface6_bank_bus_adr;
wire interface6_bank_bus_we;
wire [31:0] interface6_bank_bus_dat_w;
reg [31:0] interface6_bank_bus_dat_r = 32'd0;
reg csrbank6_movimiento0_re = 1'd0;
wire [2:0] csrbank6_movimiento0_r;
reg csrbank6_movimiento0_we = 1'd0;
wire [2:0] csrbank6_movimiento0_w;
wire csrbank6_sel;
wire [13:0] interface7_bank_bus_adr;
wire interface7_bank_bus_we;
wire [31:0] interface7_bank_bus_dat_w;
reg [31:0] interface7_bank_bus_dat_r = 32'd0;
reg csrbank7_enable0_re = 1'd0;
wire csrbank7_enable0_r;
reg csrbank7_enable0_we = 1'd0;
wire csrbank7_enable0_w;
reg csrbank7_dutty0_re = 1'd0;
wire [15:0] csrbank7_dutty0_r;
reg csrbank7_dutty0_we = 1'd0;
wire [15:0] csrbank7_dutty0_w;
reg csrbank7_period0_re = 1'd0;
wire [15:0] csrbank7_period0_r;
reg csrbank7_period0_we = 1'd0;
wire [15:0] csrbank7_period0_w;
wire csrbank7_sel;
wire [13:0] interface8_bank_bus_adr;
wire interface8_bank_bus_we;
wire [31:0] interface8_bank_bus_dat_w;
reg [31:0] interface8_bank_bus_dat_r = 32'd0;
reg csrbank8_load0_re = 1'd0;
wire [31:0] csrbank8_load0_r;
reg csrbank8_load0_we = 1'd0;
wire [31:0] csrbank8_load0_w;
reg csrbank8_reload0_re = 1'd0;
wire [31:0] csrbank8_reload0_r;
reg csrbank8_reload0_we = 1'd0;
wire [31:0] csrbank8_reload0_w;
reg csrbank8_en0_re = 1'd0;
wire csrbank8_en0_r;
reg csrbank8_en0_we = 1'd0;
wire csrbank8_en0_w;
reg csrbank8_update_value0_re = 1'd0;
wire csrbank8_update_value0_r;
reg csrbank8_update_value0_we = 1'd0;
wire csrbank8_update_value0_w;
reg csrbank8_value_re = 1'd0;
wire [31:0] csrbank8_value_r;
reg csrbank8_value_we = 1'd0;
wire [31:0] csrbank8_value_w;
reg csrbank8_ev_status_re = 1'd0;
wire csrbank8_ev_status_r;
reg csrbank8_ev_status_we = 1'd0;
wire csrbank8_ev_status_w;
reg csrbank8_ev_pending_re = 1'd0;
wire csrbank8_ev_pending_r;
reg csrbank8_ev_pending_we = 1'd0;
wire csrbank8_ev_pending_w;
reg csrbank8_ev_enable0_re = 1'd0;
wire csrbank8_ev_enable0_r;
reg csrbank8_ev_enable0_we = 1'd0;
wire csrbank8_ev_enable0_w;
wire csrbank8_sel;
wire [13:0] interface9_bank_bus_adr;
wire interface9_bank_bus_we;
wire [31:0] interface9_bank_bus_dat_w;
reg [31:0] interface9_bank_bus_dat_r = 32'd0;
reg csrbank9_txfull_re = 1'd0;
wire csrbank9_txfull_r;
reg csrbank9_txfull_we = 1'd0;
wire csrbank9_txfull_w;
reg csrbank9_rxempty_re = 1'd0;
wire csrbank9_rxempty_r;
reg csrbank9_rxempty_we = 1'd0;
wire csrbank9_rxempty_w;
reg csrbank9_ev_status_re = 1'd0;
wire [1:0] csrbank9_ev_status_r;
reg csrbank9_ev_status_we = 1'd0;
wire [1:0] csrbank9_ev_status_w;
reg csrbank9_ev_pending_re = 1'd0;
wire [1:0] csrbank9_ev_pending_r;
reg csrbank9_ev_pending_we = 1'd0;
wire [1:0] csrbank9_ev_pending_w;
reg csrbank9_ev_enable0_re = 1'd0;
wire [1:0] csrbank9_ev_enable0_r;
reg csrbank9_ev_enable0_we = 1'd0;
wire [1:0] csrbank9_ev_enable0_w;
reg csrbank9_txempty_re = 1'd0;
wire csrbank9_txempty_r;
reg csrbank9_txempty_we = 1'd0;
wire csrbank9_txempty_w;
reg csrbank9_rxfull_re = 1'd0;
wire csrbank9_rxfull_r;
reg csrbank9_rxfull_we = 1'd0;
wire csrbank9_rxfull_w;
wire csrbank9_sel;
wire [13:0] interface10_bank_bus_adr;
wire interface10_bank_bus_we;
wire [31:0] interface10_bank_bus_dat_w;
reg [31:0] interface10_bank_bus_dat_r = 32'd0;
reg csrbank10_init0_re = 1'd0;
wire csrbank10_init0_r;
reg csrbank10_init0_we = 1'd0;
wire csrbank10_init0_w;
reg csrbank10_tiempo_re = 1'd0;
wire [15:0] csrbank10_tiempo_r;
reg csrbank10_tiempo_we = 1'd0;
wire [15:0] csrbank10_tiempo_w;
reg csrbank10_done_re = 1'd0;
wire csrbank10_done_r;
reg csrbank10_done_we = 1'd0;
wire csrbank10_done_w;
wire csrbank10_sel;
wire [13:0] csr_interconnect_adr;
wire csr_interconnect_we;
wire [31:0] csr_interconnect_dat_w;
wire [31:0] csr_interconnect_dat_r;
reg state = 1'd0;
reg next_state = 1'd0;
reg [29:0] array_muxed0 = 30'd0;
reg [31:0] array_muxed1 = 32'd0;
reg [3:0] array_muxed2 = 4'd0;
reg array_muxed3 = 1'd0;
reg array_muxed4 = 1'd0;
reg array_muxed5 = 1'd0;
reg [2:0] array_muxed6 = 3'd0;
reg [1:0] array_muxed7 = 2'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg xilinxmultiregimpl0_regs0 = 1'd0;
(* async_reg = "true", dont_touch = "true" *) reg xilinxmultiregimpl0_regs1 = 1'd0;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg [2:0] xilinxmultiregimpl1_regs0 = 3'd0;
(* async_reg = "true", dont_touch = "true" *) reg [2:0] xilinxmultiregimpl1_regs1 = 3'd0;
wire xilinxmultiregimpl1;
(* async_reg = "true", mr_ff = "true", dont_touch = "true" *) reg [2:0] xilinxmultiregimpl2_regs0 = 3'd0;
(* async_reg = "true", dont_touch = "true" *) reg [2:0] xilinxmultiregimpl2_regs1 = 3'd0;
wire xilinxmultiregimpl2;

assign picorv32_reset = (soc_rst | cpu_rst);
assign bus_error = error;
always @(*) begin
	picorv32_interrupt <= 32'd0;
	picorv32_interrupt[3] <= UARTA_irq;
	picorv32_interrupt[2] <= UARTB_irq;
	picorv32_interrupt[1] <= timer_irq;
	picorv32_interrupt[0] <= uart_irq;
end
assign bus_errors_status = bus_errors;
assign picorv32_idbus_adr = picorv32_mem_addr[31:2];
assign picorv32_idbus_dat_w = picorv32_mem_wdata;
assign picorv32_idbus_we = (picorv32_mem_wstrb != 1'd0);
assign picorv32_idbus_sel = picorv32_mem_wstrb;
assign picorv32_idbus_cyc = picorv32_mem_valid;
assign picorv32_idbus_stb = picorv32_mem_valid;
assign picorv32_idbus_cti = 1'd0;
assign picorv32_idbus_bte = 1'd0;
assign picorv32_mem_ready = picorv32_idbus_ack;
assign picorv32_mem_rdata = picorv32_idbus_dat_r;
assign adr = ram_bus_adr[12:0];
assign ram_bus_dat_r = dat_r;
always @(*) begin
	sram0_we <= 4'd0;
	sram0_we[0] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[0]);
	sram0_we[1] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[1]);
	sram0_we[2] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[2]);
	sram0_we[3] <= (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & interface0_ram_bus_we) & interface0_ram_bus_sel[3]);
end
assign sram0_adr = interface0_ram_bus_adr[10:0];
assign interface0_ram_bus_dat_r = sram0_dat_r;
assign sram0_dat_w = interface0_ram_bus_dat_w;
always @(*) begin
	sram1_we <= 4'd0;
	sram1_we[0] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[0]);
	sram1_we[1] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[1]);
	sram1_we[2] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[2]);
	sram1_we[3] <= (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & interface1_ram_bus_we) & interface1_ram_bus_sel[3]);
end
assign sram1_adr = interface1_ram_bus_adr[11:0];
assign interface1_ram_bus_dat_r = sram1_dat_r;
assign sram1_dat_w = interface1_ram_bus_dat_w;
always @(*) begin
	tx_data_rs232phytx_next_value2 <= 8'd0;
	tx_data_rs232phytx_next_value_ce2 <= 1'd0;
	rs232phytx_next_state <= 1'd0;
	tx_sink_ready <= 1'd0;
	tx_count_rs232phytx_next_value0 <= 4'd0;
	tx_count_rs232phytx_next_value_ce0 <= 1'd0;
	serial_tx_rs232phytx_next_value1 <= 1'd0;
	serial_tx_rs232phytx_next_value_ce1 <= 1'd0;
	tx_enable <= 1'd0;
	rs232phytx_next_state <= rs232phytx_state;
	case (rs232phytx_state)
		1'd1: begin
			tx_enable <= 1'd1;
			if (tx_tick) begin
				serial_tx_rs232phytx_next_value1 <= tx_data;
				serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
				tx_count_rs232phytx_next_value0 <= (tx_count + 1'd1);
				tx_count_rs232phytx_next_value_ce0 <= 1'd1;
				tx_data_rs232phytx_next_value2 <= {1'd1, tx_data[7:1]};
				tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				if ((tx_count == 4'd9)) begin
					tx_sink_ready <= 1'd1;
					rs232phytx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			tx_count_rs232phytx_next_value0 <= 1'd0;
			tx_count_rs232phytx_next_value_ce0 <= 1'd1;
			serial_tx_rs232phytx_next_value1 <= 1'd1;
			serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
			if (tx_sink_valid) begin
				serial_tx_rs232phytx_next_value1 <= 1'd0;
				serial_tx_rs232phytx_next_value_ce1 <= 1'd1;
				tx_data_rs232phytx_next_value2 <= tx_sink_payload_data;
				tx_data_rs232phytx_next_value_ce2 <= 1'd1;
				rs232phytx_next_state <= 1'd1;
			end
		end
	endcase
end
always @(*) begin
	rx_data_rs232phyrx_next_value_ce1 <= 1'd0;
	rx_source_valid <= 1'd0;
	rs232phyrx_next_state <= 1'd0;
	rx_count_rs232phyrx_next_value0 <= 4'd0;
	rx_count_rs232phyrx_next_value_ce0 <= 1'd0;
	rx_source_payload_data <= 8'd0;
	rx_enable <= 1'd0;
	rx_data_rs232phyrx_next_value1 <= 8'd0;
	rs232phyrx_next_state <= rs232phyrx_state;
	case (rs232phyrx_state)
		1'd1: begin
			rx_enable <= 1'd1;
			if (rx_tick) begin
				rx_count_rs232phyrx_next_value0 <= (rx_count + 1'd1);
				rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
				rx_data_rs232phyrx_next_value1 <= {rx_rx, rx_data[7:1]};
				rx_data_rs232phyrx_next_value_ce1 <= 1'd1;
				if ((rx_count == 4'd9)) begin
					rx_source_valid <= (rx_rx == 1'd1);
					rx_source_payload_data <= rx_data;
					rs232phyrx_next_state <= 1'd0;
				end
			end
		end
		default: begin
			rx_count_rs232phyrx_next_value0 <= 1'd0;
			rx_count_rs232phyrx_next_value_ce0 <= 1'd1;
			if (((rx_rx == 1'd0) & (rx_rx_d == 1'd1))) begin
				rs232phyrx_next_state <= 1'd1;
			end
		end
	endcase
end
assign uart_uart_sink_valid = rx_source_valid;
assign rx_source_ready = uart_uart_sink_ready;
assign uart_uart_sink_first = rx_source_first;
assign uart_uart_sink_last = rx_source_last;
assign uart_uart_sink_payload_data = rx_source_payload_data;
assign tx_sink_valid = uart_uart_source_valid;
assign uart_uart_source_ready = tx_sink_ready;
assign tx_sink_first = uart_uart_source_first;
assign tx_sink_last = uart_uart_source_last;
assign tx_sink_payload_data = uart_uart_source_payload_data;
assign uart_tx_fifo_sink_valid = uart_rxtx_re;
assign uart_tx_fifo_sink_payload_data = uart_rxtx_r;
assign uart_uart_source_valid = uart_tx_fifo_source_valid;
assign uart_tx_fifo_source_ready = uart_uart_source_ready;
assign uart_uart_source_first = uart_tx_fifo_source_first;
assign uart_uart_source_last = uart_tx_fifo_source_last;
assign uart_uart_source_payload_data = uart_tx_fifo_source_payload_data;
assign uart_txfull_status = (~uart_tx_fifo_sink_ready);
assign uart_txempty_status = (~uart_tx_fifo_source_valid);
assign uart_tx_trigger = uart_tx_fifo_sink_ready;
assign uart_rx_fifo_sink_valid = uart_uart_sink_valid;
assign uart_uart_sink_ready = uart_rx_fifo_sink_ready;
assign uart_rx_fifo_sink_first = uart_uart_sink_first;
assign uart_rx_fifo_sink_last = uart_uart_sink_last;
assign uart_rx_fifo_sink_payload_data = uart_uart_sink_payload_data;
assign uart_rxtx_w = uart_rx_fifo_source_payload_data;
assign uart_rx_fifo_source_ready = (uart_rx_clear | (1'd0 & uart_rxtx_we));
assign uart_rxempty_status = (~uart_rx_fifo_source_valid);
assign uart_rxfull_status = (~uart_rx_fifo_sink_ready);
assign uart_rx_trigger = uart_rx_fifo_source_valid;
assign uart_tx0 = uart_tx_status;
assign uart_tx1 = uart_tx_pending;
always @(*) begin
	uart_tx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[0])) begin
		uart_tx_clear <= 1'd1;
	end
end
assign uart_rx0 = uart_rx_status;
assign uart_rx1 = uart_rx_pending;
always @(*) begin
	uart_rx_clear <= 1'd0;
	if ((uart_pending_re & uart_pending_r[1])) begin
		uart_rx_clear <= 1'd1;
	end
end
assign uart_irq = ((uart_pending_status[0] & uart_enable_storage[0]) | (uart_pending_status[1] & uart_enable_storage[1]));
assign uart_tx_status = uart_tx_trigger;
assign uart_rx_status = uart_rx_trigger;
assign uart_tx_fifo_syncfifo_din = {uart_tx_fifo_fifo_in_last, uart_tx_fifo_fifo_in_first, uart_tx_fifo_fifo_in_payload_data};
assign {uart_tx_fifo_fifo_out_last, uart_tx_fifo_fifo_out_first, uart_tx_fifo_fifo_out_payload_data} = uart_tx_fifo_syncfifo_dout;
assign uart_tx_fifo_sink_ready = uart_tx_fifo_syncfifo_writable;
assign uart_tx_fifo_syncfifo_we = uart_tx_fifo_sink_valid;
assign uart_tx_fifo_fifo_in_first = uart_tx_fifo_sink_first;
assign uart_tx_fifo_fifo_in_last = uart_tx_fifo_sink_last;
assign uart_tx_fifo_fifo_in_payload_data = uart_tx_fifo_sink_payload_data;
assign uart_tx_fifo_source_valid = uart_tx_fifo_readable;
assign uart_tx_fifo_source_first = uart_tx_fifo_fifo_out_first;
assign uart_tx_fifo_source_last = uart_tx_fifo_fifo_out_last;
assign uart_tx_fifo_source_payload_data = uart_tx_fifo_fifo_out_payload_data;
assign uart_tx_fifo_re = uart_tx_fifo_source_ready;
assign uart_tx_fifo_syncfifo_re = (uart_tx_fifo_syncfifo_readable & ((~uart_tx_fifo_readable) | uart_tx_fifo_re));
assign uart_tx_fifo_level1 = (uart_tx_fifo_level0 + uart_tx_fifo_readable);
always @(*) begin
	uart_tx_fifo_wrport_adr <= 4'd0;
	if (uart_tx_fifo_replace) begin
		uart_tx_fifo_wrport_adr <= (uart_tx_fifo_produce - 1'd1);
	end else begin
		uart_tx_fifo_wrport_adr <= uart_tx_fifo_produce;
	end
end
assign uart_tx_fifo_wrport_dat_w = uart_tx_fifo_syncfifo_din;
assign uart_tx_fifo_wrport_we = (uart_tx_fifo_syncfifo_we & (uart_tx_fifo_syncfifo_writable | uart_tx_fifo_replace));
assign uart_tx_fifo_do_read = (uart_tx_fifo_syncfifo_readable & uart_tx_fifo_syncfifo_re);
assign uart_tx_fifo_rdport_adr = uart_tx_fifo_consume;
assign uart_tx_fifo_syncfifo_dout = uart_tx_fifo_rdport_dat_r;
assign uart_tx_fifo_rdport_re = uart_tx_fifo_do_read;
assign uart_tx_fifo_syncfifo_writable = (uart_tx_fifo_level0 != 5'd16);
assign uart_tx_fifo_syncfifo_readable = (uart_tx_fifo_level0 != 1'd0);
assign uart_rx_fifo_syncfifo_din = {uart_rx_fifo_fifo_in_last, uart_rx_fifo_fifo_in_first, uart_rx_fifo_fifo_in_payload_data};
assign {uart_rx_fifo_fifo_out_last, uart_rx_fifo_fifo_out_first, uart_rx_fifo_fifo_out_payload_data} = uart_rx_fifo_syncfifo_dout;
assign uart_rx_fifo_sink_ready = uart_rx_fifo_syncfifo_writable;
assign uart_rx_fifo_syncfifo_we = uart_rx_fifo_sink_valid;
assign uart_rx_fifo_fifo_in_first = uart_rx_fifo_sink_first;
assign uart_rx_fifo_fifo_in_last = uart_rx_fifo_sink_last;
assign uart_rx_fifo_fifo_in_payload_data = uart_rx_fifo_sink_payload_data;
assign uart_rx_fifo_source_valid = uart_rx_fifo_readable;
assign uart_rx_fifo_source_first = uart_rx_fifo_fifo_out_first;
assign uart_rx_fifo_source_last = uart_rx_fifo_fifo_out_last;
assign uart_rx_fifo_source_payload_data = uart_rx_fifo_fifo_out_payload_data;
assign uart_rx_fifo_re = uart_rx_fifo_source_ready;
assign uart_rx_fifo_syncfifo_re = (uart_rx_fifo_syncfifo_readable & ((~uart_rx_fifo_readable) | uart_rx_fifo_re));
assign uart_rx_fifo_level1 = (uart_rx_fifo_level0 + uart_rx_fifo_readable);
always @(*) begin
	uart_rx_fifo_wrport_adr <= 4'd0;
	if (uart_rx_fifo_replace) begin
		uart_rx_fifo_wrport_adr <= (uart_rx_fifo_produce - 1'd1);
	end else begin
		uart_rx_fifo_wrport_adr <= uart_rx_fifo_produce;
	end
end
assign uart_rx_fifo_wrport_dat_w = uart_rx_fifo_syncfifo_din;
assign uart_rx_fifo_wrport_we = (uart_rx_fifo_syncfifo_we & (uart_rx_fifo_syncfifo_writable | uart_rx_fifo_replace));
assign uart_rx_fifo_do_read = (uart_rx_fifo_syncfifo_readable & uart_rx_fifo_syncfifo_re);
assign uart_rx_fifo_rdport_adr = uart_rx_fifo_consume;
assign uart_rx_fifo_syncfifo_dout = uart_rx_fifo_rdport_dat_r;
assign uart_rx_fifo_rdport_re = uart_rx_fifo_do_read;
assign uart_rx_fifo_syncfifo_writable = (uart_rx_fifo_level0 != 5'd16);
assign uart_rx_fifo_syncfifo_readable = (uart_rx_fifo_level0 != 1'd0);
assign timer_zero_trigger = (timer_value == 1'd0);
assign timer_zero0 = timer_zero_status;
assign timer_zero1 = timer_zero_pending;
always @(*) begin
	timer_zero_clear <= 1'd0;
	if ((timer_pending_re & timer_pending_r)) begin
		timer_zero_clear <= 1'd1;
	end
end
assign timer_irq = (timer_pending_status & timer_enable_storage);
assign timer_zero_status = timer_zero_trigger;
assign sys_clk = clk;
assign por_clk = clk;
assign sys_rst = int_rst;
assign UARTB_TXDONE_trigger = (UARTB_TxDone_status == 1'd1);
assign UARTB_RXAVAILABLE_trigger = (UARTB_RxAvailable_status == 1'd1);
assign UARTB_TXDONE0 = UARTB_TXDONE_status;
assign UARTB_TXDONE1 = UARTB_TXDONE_pending;
always @(*) begin
	UARTB_TXDONE_clear <= 1'd0;
	if ((UARTB_pending_re & UARTB_pending_r[0])) begin
		UARTB_TXDONE_clear <= 1'd1;
	end
end
assign UARTB_RXAVAILABLE0 = UARTB_RXAVAILABLE_status;
assign UARTB_RXAVAILABLE1 = UARTB_RXAVAILABLE_pending;
always @(*) begin
	UARTB_RXAVAILABLE_clear <= 1'd0;
	if ((UARTB_pending_re & UARTB_pending_r[1])) begin
		UARTB_RXAVAILABLE_clear <= 1'd1;
	end
end
assign UARTB_irq = ((UARTB_pending_status[0] & UARTB_enable_storage[0]) | (UARTB_pending_status[1] & UARTB_enable_storage[1]));
assign UARTB_TXDONE_status = UARTB_TXDONE_trigger;
assign UARTB_RXAVAILABLE_status = UARTB_RXAVAILABLE_trigger;
assign UARTA_TXDONE_trigger = (UARTA_TxDone_status == 1'd1);
assign UARTA_RXAVAILABLE_trigger = (UARTA_RxAvailable_status == 1'd1);
assign UARTA_TXDONE0 = UARTA_TXDONE_status;
assign UARTA_TXDONE1 = UARTA_TXDONE_pending;
always @(*) begin
	UARTA_TXDONE_clear <= 1'd0;
	if ((UARTA_pending_re & UARTA_pending_r[0])) begin
		UARTA_TXDONE_clear <= 1'd1;
	end
end
assign UARTA_RXAVAILABLE0 = UARTA_RXAVAILABLE_status;
assign UARTA_RXAVAILABLE1 = UARTA_RXAVAILABLE_pending;
always @(*) begin
	UARTA_RXAVAILABLE_clear <= 1'd0;
	if ((UARTA_pending_re & UARTA_pending_r[1])) begin
		UARTA_RXAVAILABLE_clear <= 1'd1;
	end
end
assign UARTA_irq = ((UARTA_pending_status[0] & UARTA_enable_storage[0]) | (UARTA_pending_status[1] & UARTA_enable_storage[1]));
assign UARTA_TXDONE_status = UARTA_TXDONE_trigger;
assign UARTA_RXAVAILABLE_status = UARTA_RXAVAILABLE_trigger;
always @(*) begin
	basesoc_wishbone_ack <= 1'd0;
	basesoc_dat_w <= 32'd0;
	basesoc_wishbone_dat_r <= 32'd0;
	basesoc_adr <= 14'd0;
	basesoc_we <= 1'd0;
	next_state <= 1'd0;
	next_state <= state;
	case (state)
		1'd1: begin
			basesoc_wishbone_ack <= 1'd1;
			basesoc_wishbone_dat_r <= basesoc_dat_r;
			next_state <= 1'd0;
		end
		default: begin
			basesoc_dat_w <= basesoc_wishbone_dat_w;
			if ((basesoc_wishbone_cyc & basesoc_wishbone_stb)) begin
				basesoc_adr <= basesoc_wishbone_adr;
				basesoc_we <= (basesoc_wishbone_we & (basesoc_wishbone_sel != 1'd0));
				next_state <= 1'd1;
			end
		end
	endcase
end
assign shared_adr = array_muxed0;
assign shared_dat_w = array_muxed1;
assign shared_sel = array_muxed2;
assign shared_cyc = array_muxed3;
assign shared_stb = array_muxed4;
assign shared_we = array_muxed5;
assign shared_cti = array_muxed6;
assign shared_bte = array_muxed7;
assign picorv32_idbus_dat_r = shared_dat_r;
assign picorv32_idbus_ack = (shared_ack & (grant == 1'd0));
assign picorv32_idbus_err = (shared_err & (grant == 1'd0));
assign request = {picorv32_idbus_cyc};
assign grant = 1'd0;
always @(*) begin
	slave_sel <= 4'd0;
	slave_sel[0] <= (shared_adr[29:13] == 1'd0);
	slave_sel[1] <= (shared_adr[29:11] == 12'd2048);
	slave_sel[2] <= (shared_adr[29:12] == 17'd65536);
	slave_sel[3] <= (shared_adr[29:14] == 16'd33280);
end
assign ram_bus_adr = shared_adr;
assign ram_bus_dat_w = shared_dat_w;
assign ram_bus_sel = shared_sel;
assign ram_bus_stb = shared_stb;
assign ram_bus_we = shared_we;
assign ram_bus_cti = shared_cti;
assign ram_bus_bte = shared_bte;
assign interface0_ram_bus_adr = shared_adr;
assign interface0_ram_bus_dat_w = shared_dat_w;
assign interface0_ram_bus_sel = shared_sel;
assign interface0_ram_bus_stb = shared_stb;
assign interface0_ram_bus_we = shared_we;
assign interface0_ram_bus_cti = shared_cti;
assign interface0_ram_bus_bte = shared_bte;
assign interface1_ram_bus_adr = shared_adr;
assign interface1_ram_bus_dat_w = shared_dat_w;
assign interface1_ram_bus_sel = shared_sel;
assign interface1_ram_bus_stb = shared_stb;
assign interface1_ram_bus_we = shared_we;
assign interface1_ram_bus_cti = shared_cti;
assign interface1_ram_bus_bte = shared_bte;
assign basesoc_wishbone_adr = shared_adr;
assign basesoc_wishbone_dat_w = shared_dat_w;
assign basesoc_wishbone_sel = shared_sel;
assign basesoc_wishbone_stb = shared_stb;
assign basesoc_wishbone_we = shared_we;
assign basesoc_wishbone_cti = shared_cti;
assign basesoc_wishbone_bte = shared_bte;
assign ram_bus_cyc = (shared_cyc & slave_sel[0]);
assign interface0_ram_bus_cyc = (shared_cyc & slave_sel[1]);
assign interface1_ram_bus_cyc = (shared_cyc & slave_sel[2]);
assign basesoc_wishbone_cyc = (shared_cyc & slave_sel[3]);
assign shared_err = (((ram_bus_err | interface0_ram_bus_err) | interface1_ram_bus_err) | basesoc_wishbone_err);
assign wait_1 = ((shared_stb & shared_cyc) & (~shared_ack));
always @(*) begin
	error <= 1'd0;
	shared_dat_r <= 32'd0;
	shared_ack <= 1'd0;
	shared_ack <= (((ram_bus_ack | interface0_ram_bus_ack) | interface1_ram_bus_ack) | basesoc_wishbone_ack);
	shared_dat_r <= (((({32{slave_sel_r[0]}} & ram_bus_dat_r) | ({32{slave_sel_r[1]}} & interface0_ram_bus_dat_r)) | ({32{slave_sel_r[2]}} & interface1_ram_bus_dat_r)) | ({32{slave_sel_r[3]}} & basesoc_wishbone_dat_r));
	if (done) begin
		shared_dat_r <= 32'd4294967295;
		shared_ack <= 1'd1;
		error <= 1'd1;
	end
end
assign done = (count == 1'd0);
assign csrbank0_sel = (interface0_bank_bus_adr[13:9] == 3'd7);
assign csrbank0_Baudios0_r = interface0_bank_bus_dat_w[15:0];
always @(*) begin
	csrbank0_Baudios0_we <= 1'd0;
	csrbank0_Baudios0_re <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank0_Baudios0_re <= interface0_bank_bus_we;
		csrbank0_Baudios0_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_TxInit0_r = interface0_bank_bus_dat_w[0];
always @(*) begin
	csrbank0_TxInit0_re <= 1'd0;
	csrbank0_TxInit0_we <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank0_TxInit0_re <= interface0_bank_bus_we;
		csrbank0_TxInit0_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_TxData0_r = interface0_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank0_TxData0_we <= 1'd0;
	csrbank0_TxData0_re <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank0_TxData0_re <= interface0_bank_bus_we;
		csrbank0_TxData0_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_RxData_r = interface0_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank0_RxData_we <= 1'd0;
	csrbank0_RxData_re <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank0_RxData_re <= interface0_bank_bus_we;
		csrbank0_RxData_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_TxDone_r = interface0_bank_bus_dat_w[0];
always @(*) begin
	csrbank0_TxDone_re <= 1'd0;
	csrbank0_TxDone_we <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank0_TxDone_re <= interface0_bank_bus_we;
		csrbank0_TxDone_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_RxAvailable_r = interface0_bank_bus_dat_w[0];
always @(*) begin
	csrbank0_RxAvailable_re <= 1'd0;
	csrbank0_RxAvailable_we <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank0_RxAvailable_re <= interface0_bank_bus_we;
		csrbank0_RxAvailable_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_ev_status_r = interface0_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank0_ev_status_we <= 1'd0;
	csrbank0_ev_status_re <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank0_ev_status_re <= interface0_bank_bus_we;
		csrbank0_ev_status_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_ev_pending_r = interface0_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank0_ev_pending_we <= 1'd0;
	csrbank0_ev_pending_re <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank0_ev_pending_re <= interface0_bank_bus_we;
		csrbank0_ev_pending_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_ev_enable0_r = interface0_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank0_ev_enable0_re <= 1'd0;
	csrbank0_ev_enable0_we <= 1'd0;
	if ((csrbank0_sel & (interface0_bank_bus_adr[8:0] == 4'd8))) begin
		csrbank0_ev_enable0_re <= interface0_bank_bus_we;
		csrbank0_ev_enable0_we <= (~interface0_bank_bus_we);
	end
end
assign csrbank0_Baudios0_w = UARTA_Baudios_storage[15:0];
assign csrbank0_TxInit0_w = UARTA_TxInit_storage;
assign csrbank0_TxData0_w = UARTA_TxData_storage[7:0];
assign csrbank0_RxData_w = UARTA_RxData_status[7:0];
assign UARTA_RxData_we = csrbank0_RxData_we;
assign csrbank0_TxDone_w = UARTA_TxDone_status;
assign UARTA_TxDone_we = csrbank0_TxDone_we;
assign csrbank0_RxAvailable_w = UARTA_RxAvailable_status;
assign UARTA_RxAvailable_we = csrbank0_RxAvailable_we;
always @(*) begin
	UARTA_status_status <= 2'd0;
	UARTA_status_status[0] <= UARTA_TXDONE0;
	UARTA_status_status[1] <= UARTA_RXAVAILABLE0;
end
assign csrbank0_ev_status_w = UARTA_status_status[1:0];
assign UARTA_status_we = csrbank0_ev_status_we;
always @(*) begin
	UARTA_pending_status <= 2'd0;
	UARTA_pending_status[0] <= UARTA_TXDONE1;
	UARTA_pending_status[1] <= UARTA_RXAVAILABLE1;
end
assign csrbank0_ev_pending_w = UARTA_pending_status[1:0];
assign UARTA_pending_we = csrbank0_ev_pending_we;
assign UARTA_TXDONE2 = UARTA_enable_storage[0];
assign UARTA_RXAVAILABLE2 = UARTA_enable_storage[1];
assign csrbank0_ev_enable0_w = UARTA_enable_storage[1:0];
assign csrbank1_sel = (interface1_bank_bus_adr[13:9] == 3'd6);
assign csrbank1_Baudios0_r = interface1_bank_bus_dat_w[15:0];
always @(*) begin
	csrbank1_Baudios0_re <= 1'd0;
	csrbank1_Baudios0_we <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank1_Baudios0_re <= interface1_bank_bus_we;
		csrbank1_Baudios0_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_TxInit0_r = interface1_bank_bus_dat_w[0];
always @(*) begin
	csrbank1_TxInit0_we <= 1'd0;
	csrbank1_TxInit0_re <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank1_TxInit0_re <= interface1_bank_bus_we;
		csrbank1_TxInit0_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_TxData0_r = interface1_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank1_TxData0_re <= 1'd0;
	csrbank1_TxData0_we <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank1_TxData0_re <= interface1_bank_bus_we;
		csrbank1_TxData0_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_RxData_r = interface1_bank_bus_dat_w[7:0];
always @(*) begin
	csrbank1_RxData_we <= 1'd0;
	csrbank1_RxData_re <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank1_RxData_re <= interface1_bank_bus_we;
		csrbank1_RxData_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_TxDone_r = interface1_bank_bus_dat_w[0];
always @(*) begin
	csrbank1_TxDone_we <= 1'd0;
	csrbank1_TxDone_re <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank1_TxDone_re <= interface1_bank_bus_we;
		csrbank1_TxDone_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_RxAvailable_r = interface1_bank_bus_dat_w[0];
always @(*) begin
	csrbank1_RxAvailable_re <= 1'd0;
	csrbank1_RxAvailable_we <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank1_RxAvailable_re <= interface1_bank_bus_we;
		csrbank1_RxAvailable_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_ev_status_r = interface1_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank1_ev_status_re <= 1'd0;
	csrbank1_ev_status_we <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank1_ev_status_re <= interface1_bank_bus_we;
		csrbank1_ev_status_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_ev_pending_r = interface1_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank1_ev_pending_we <= 1'd0;
	csrbank1_ev_pending_re <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank1_ev_pending_re <= interface1_bank_bus_we;
		csrbank1_ev_pending_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_ev_enable0_r = interface1_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank1_ev_enable0_we <= 1'd0;
	csrbank1_ev_enable0_re <= 1'd0;
	if ((csrbank1_sel & (interface1_bank_bus_adr[8:0] == 4'd8))) begin
		csrbank1_ev_enable0_re <= interface1_bank_bus_we;
		csrbank1_ev_enable0_we <= (~interface1_bank_bus_we);
	end
end
assign csrbank1_Baudios0_w = UARTB_Baudios_storage[15:0];
assign csrbank1_TxInit0_w = UARTB_TxInit_storage;
assign csrbank1_TxData0_w = UARTB_TxData_storage[7:0];
assign csrbank1_RxData_w = UARTB_RxData_status[7:0];
assign UARTB_RxData_we = csrbank1_RxData_we;
assign csrbank1_TxDone_w = UARTB_TxDone_status;
assign UARTB_TxDone_we = csrbank1_TxDone_we;
assign csrbank1_RxAvailable_w = UARTB_RxAvailable_status;
assign UARTB_RxAvailable_we = csrbank1_RxAvailable_we;
always @(*) begin
	UARTB_status_status <= 2'd0;
	UARTB_status_status[0] <= UARTB_TXDONE0;
	UARTB_status_status[1] <= UARTB_RXAVAILABLE0;
end
assign csrbank1_ev_status_w = UARTB_status_status[1:0];
assign UARTB_status_we = csrbank1_ev_status_we;
always @(*) begin
	UARTB_pending_status <= 2'd0;
	UARTB_pending_status[0] <= UARTB_TXDONE1;
	UARTB_pending_status[1] <= UARTB_RXAVAILABLE1;
end
assign csrbank1_ev_pending_w = UARTB_pending_status[1:0];
assign UARTB_pending_we = csrbank1_ev_pending_we;
assign UARTB_TXDONE2 = UARTB_enable_storage[0];
assign UARTB_RXAVAILABLE2 = UARTB_enable_storage[1];
assign csrbank1_ev_enable0_w = UARTB_enable_storage[1:0];
assign csrbank2_sel = (interface2_bank_bus_adr[13:9] == 3'd5);
assign csrbank2_Forma_r = interface2_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank2_Forma_re <= 1'd0;
	csrbank2_Forma_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank2_Forma_re <= interface2_bank_bus_we;
		csrbank2_Forma_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_PromedioColor_r = interface2_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank2_PromedioColor_re <= 1'd0;
	csrbank2_PromedioColor_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank2_PromedioColor_re <= interface2_bank_bus_we;
		csrbank2_PromedioColor_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_MapaData0_r = interface2_bank_bus_dat_w[3:0];
always @(*) begin
	csrbank2_MapaData0_we <= 1'd0;
	csrbank2_MapaData0_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank2_MapaData0_re <= interface2_bank_bus_we;
		csrbank2_MapaData0_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_MapaAddr0_r = interface2_bank_bus_dat_w[5:0];
always @(*) begin
	csrbank2_MapaAddr0_we <= 1'd0;
	csrbank2_MapaAddr0_re <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank2_MapaAddr0_re <= interface2_bank_bus_we;
		csrbank2_MapaAddr0_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_MapaWrite0_r = interface2_bank_bus_dat_w[0];
always @(*) begin
	csrbank2_MapaWrite0_re <= 1'd0;
	csrbank2_MapaWrite0_we <= 1'd0;
	if ((csrbank2_sel & (interface2_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank2_MapaWrite0_re <= interface2_bank_bus_we;
		csrbank2_MapaWrite0_we <= (~interface2_bank_bus_we);
	end
end
assign csrbank2_Forma_w = Forma_status[1:0];
assign Forma_we = csrbank2_Forma_we;
assign csrbank2_PromedioColor_w = PromedioColor_status[1:0];
assign PromedioColor_we = csrbank2_PromedioColor_we;
assign csrbank2_MapaData0_w = MapaData_storage[3:0];
assign csrbank2_MapaAddr0_w = MapaAddr_storage[5:0];
assign csrbank2_MapaWrite0_w = MapaWrite_storage;
assign csrbank3_sel = (interface3_bank_bus_adr[13:9] == 1'd0);
assign csrbank3_in_r = interface3_bank_bus_dat_w[2:0];
always @(*) begin
	csrbank3_in_we <= 1'd0;
	csrbank3_in_re <= 1'd0;
	if ((csrbank3_sel & (interface3_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank3_in_re <= interface3_bank_bus_we;
		csrbank3_in_we <= (~interface3_bank_bus_we);
	end
end
assign csrbank3_in_w = buttons_status[2:0];
assign buttons_we = csrbank3_in_we;
assign csrbank4_sel = (interface4_bank_bus_adr[13:9] == 4'd8);
assign csrbank4_reset0_r = interface4_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank4_reset0_we <= 1'd0;
	csrbank4_reset0_re <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank4_reset0_re <= interface4_bank_bus_we;
		csrbank4_reset0_we <= (~interface4_bank_bus_we);
	end
end
assign csrbank4_scratch0_r = interface4_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank4_scratch0_re <= 1'd0;
	csrbank4_scratch0_we <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank4_scratch0_re <= interface4_bank_bus_we;
		csrbank4_scratch0_we <= (~interface4_bank_bus_we);
	end
end
assign csrbank4_bus_errors_r = interface4_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank4_bus_errors_we <= 1'd0;
	csrbank4_bus_errors_re <= 1'd0;
	if ((csrbank4_sel & (interface4_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank4_bus_errors_re <= interface4_bank_bus_we;
		csrbank4_bus_errors_we <= (~interface4_bank_bus_we);
	end
end
always @(*) begin
	soc_rst <= 1'd0;
	if (reset_re) begin
		soc_rst <= reset_storage[0];
	end
end
assign cpu_rst = reset_storage[1];
assign csrbank4_reset0_w = reset_storage[1:0];
assign csrbank4_scratch0_w = scratch_storage[31:0];
assign csrbank4_bus_errors_w = bus_errors_status[31:0];
assign bus_errors_we = csrbank4_bus_errors_we;
assign csrbank5_sel = (interface5_bank_bus_adr[13:9] == 2'd3);
assign csrbank5_in_r = interface5_bank_bus_dat_w[2:0];
always @(*) begin
	csrbank5_in_re <= 1'd0;
	csrbank5_in_we <= 1'd0;
	if ((csrbank5_sel & (interface5_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank5_in_re <= interface5_bank_bus_we;
		csrbank5_in_we <= (~interface5_bank_bus_we);
	end
end
assign csrbank5_in_w = infrarojo_status[2:0];
assign infrarojo_we = csrbank5_in_we;
assign csrbank6_sel = (interface6_bank_bus_adr[13:9] == 3'd4);
assign csrbank6_movimiento0_r = interface6_bank_bus_dat_w[2:0];
always @(*) begin
	csrbank6_movimiento0_re <= 1'd0;
	csrbank6_movimiento0_we <= 1'd0;
	if ((csrbank6_sel & (interface6_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank6_movimiento0_re <= interface6_bank_bus_we;
		csrbank6_movimiento0_we <= (~interface6_bank_bus_we);
	end
end
assign csrbank6_movimiento0_w = motores_storage[2:0];
assign csrbank7_sel = (interface7_bank_bus_adr[13:9] == 1'd1);
assign csrbank7_enable0_r = interface7_bank_bus_dat_w[0];
always @(*) begin
	csrbank7_enable0_we <= 1'd0;
	csrbank7_enable0_re <= 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank7_enable0_re <= interface7_bank_bus_we;
		csrbank7_enable0_we <= (~interface7_bank_bus_we);
	end
end
assign csrbank7_dutty0_r = interface7_bank_bus_dat_w[15:0];
always @(*) begin
	csrbank7_dutty0_we <= 1'd0;
	csrbank7_dutty0_re <= 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank7_dutty0_re <= interface7_bank_bus_we;
		csrbank7_dutty0_we <= (~interface7_bank_bus_we);
	end
end
assign csrbank7_period0_r = interface7_bank_bus_dat_w[15:0];
always @(*) begin
	csrbank7_period0_re <= 1'd0;
	csrbank7_period0_we <= 1'd0;
	if ((csrbank7_sel & (interface7_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank7_period0_re <= interface7_bank_bus_we;
		csrbank7_period0_we <= (~interface7_bank_bus_we);
	end
end
assign csrbank7_enable0_w = servo_cntrl_enable_storage;
assign csrbank7_dutty0_w = servo_cntrl_dutty_storage[15:0];
assign csrbank7_period0_w = servo_cntrl_period_storage[15:0];
assign csrbank8_sel = (interface8_bank_bus_adr[13:9] == 4'd9);
assign csrbank8_load0_r = interface8_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank8_load0_re <= 1'd0;
	csrbank8_load0_we <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank8_load0_re <= interface8_bank_bus_we;
		csrbank8_load0_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_reload0_r = interface8_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank8_reload0_we <= 1'd0;
	csrbank8_reload0_re <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank8_reload0_re <= interface8_bank_bus_we;
		csrbank8_reload0_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_en0_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_en0_we <= 1'd0;
	csrbank8_en0_re <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank8_en0_re <= interface8_bank_bus_we;
		csrbank8_en0_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_update_value0_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_update_value0_re <= 1'd0;
	csrbank8_update_value0_we <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank8_update_value0_re <= interface8_bank_bus_we;
		csrbank8_update_value0_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_value_r = interface8_bank_bus_dat_w[31:0];
always @(*) begin
	csrbank8_value_we <= 1'd0;
	csrbank8_value_re <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank8_value_re <= interface8_bank_bus_we;
		csrbank8_value_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_ev_status_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_ev_status_we <= 1'd0;
	csrbank8_ev_status_re <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank8_ev_status_re <= interface8_bank_bus_we;
		csrbank8_ev_status_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_ev_pending_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_ev_pending_re <= 1'd0;
	csrbank8_ev_pending_we <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank8_ev_pending_re <= interface8_bank_bus_we;
		csrbank8_ev_pending_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_ev_enable0_r = interface8_bank_bus_dat_w[0];
always @(*) begin
	csrbank8_ev_enable0_we <= 1'd0;
	csrbank8_ev_enable0_re <= 1'd0;
	if ((csrbank8_sel & (interface8_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank8_ev_enable0_re <= interface8_bank_bus_we;
		csrbank8_ev_enable0_we <= (~interface8_bank_bus_we);
	end
end
assign csrbank8_load0_w = timer_load_storage[31:0];
assign csrbank8_reload0_w = timer_reload_storage[31:0];
assign csrbank8_en0_w = timer_en_storage;
assign csrbank8_update_value0_w = timer_update_value_storage;
assign csrbank8_value_w = timer_value_status[31:0];
assign timer_value_we = csrbank8_value_we;
assign timer_status_status = timer_zero0;
assign csrbank8_ev_status_w = timer_status_status;
assign timer_status_we = csrbank8_ev_status_we;
assign timer_pending_status = timer_zero1;
assign csrbank8_ev_pending_w = timer_pending_status;
assign timer_pending_we = csrbank8_ev_pending_we;
assign timer_zero2 = timer_enable_storage;
assign csrbank8_ev_enable0_w = timer_enable_storage;
assign csrbank9_sel = (interface9_bank_bus_adr[13:9] == 4'd10);
assign uart_rxtx_r = interface9_bank_bus_dat_w[7:0];
always @(*) begin
	uart_rxtx_we <= 1'd0;
	uart_rxtx_re <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 1'd0))) begin
		uart_rxtx_re <= interface9_bank_bus_we;
		uart_rxtx_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_txfull_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_txfull_we <= 1'd0;
	csrbank9_txfull_re <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank9_txfull_re <= interface9_bank_bus_we;
		csrbank9_txfull_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_rxempty_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_rxempty_re <= 1'd0;
	csrbank9_rxempty_we <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank9_rxempty_re <= interface9_bank_bus_we;
		csrbank9_rxempty_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_ev_status_r = interface9_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank9_ev_status_re <= 1'd0;
	csrbank9_ev_status_we <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 2'd3))) begin
		csrbank9_ev_status_re <= interface9_bank_bus_we;
		csrbank9_ev_status_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_ev_pending_r = interface9_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank9_ev_pending_we <= 1'd0;
	csrbank9_ev_pending_re <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd4))) begin
		csrbank9_ev_pending_re <= interface9_bank_bus_we;
		csrbank9_ev_pending_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_ev_enable0_r = interface9_bank_bus_dat_w[1:0];
always @(*) begin
	csrbank9_ev_enable0_we <= 1'd0;
	csrbank9_ev_enable0_re <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd5))) begin
		csrbank9_ev_enable0_re <= interface9_bank_bus_we;
		csrbank9_ev_enable0_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_txempty_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_txempty_re <= 1'd0;
	csrbank9_txempty_we <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd6))) begin
		csrbank9_txempty_re <= interface9_bank_bus_we;
		csrbank9_txempty_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_rxfull_r = interface9_bank_bus_dat_w[0];
always @(*) begin
	csrbank9_rxfull_we <= 1'd0;
	csrbank9_rxfull_re <= 1'd0;
	if ((csrbank9_sel & (interface9_bank_bus_adr[8:0] == 3'd7))) begin
		csrbank9_rxfull_re <= interface9_bank_bus_we;
		csrbank9_rxfull_we <= (~interface9_bank_bus_we);
	end
end
assign csrbank9_txfull_w = uart_txfull_status;
assign uart_txfull_we = csrbank9_txfull_we;
assign csrbank9_rxempty_w = uart_rxempty_status;
assign uart_rxempty_we = csrbank9_rxempty_we;
always @(*) begin
	uart_status_status <= 2'd0;
	uart_status_status[0] <= uart_tx0;
	uart_status_status[1] <= uart_rx0;
end
assign csrbank9_ev_status_w = uart_status_status[1:0];
assign uart_status_we = csrbank9_ev_status_we;
always @(*) begin
	uart_pending_status <= 2'd0;
	uart_pending_status[0] <= uart_tx1;
	uart_pending_status[1] <= uart_rx1;
end
assign csrbank9_ev_pending_w = uart_pending_status[1:0];
assign uart_pending_we = csrbank9_ev_pending_we;
assign uart_tx2 = uart_enable_storage[0];
assign uart_rx2 = uart_enable_storage[1];
assign csrbank9_ev_enable0_w = uart_enable_storage[1:0];
assign csrbank9_txempty_w = uart_txempty_status;
assign uart_txempty_we = csrbank9_txempty_we;
assign csrbank9_rxfull_w = uart_rxfull_status;
assign uart_rxfull_we = csrbank9_rxfull_we;
assign csrbank10_sel = (interface10_bank_bus_adr[13:9] == 2'd2);
assign csrbank10_init0_r = interface10_bank_bus_dat_w[0];
always @(*) begin
	csrbank10_init0_we <= 1'd0;
	csrbank10_init0_re <= 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 1'd0))) begin
		csrbank10_init0_re <= interface10_bank_bus_we;
		csrbank10_init0_we <= (~interface10_bank_bus_we);
	end
end
assign csrbank10_tiempo_r = interface10_bank_bus_dat_w[15:0];
always @(*) begin
	csrbank10_tiempo_re <= 1'd0;
	csrbank10_tiempo_we <= 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 1'd1))) begin
		csrbank10_tiempo_re <= interface10_bank_bus_we;
		csrbank10_tiempo_we <= (~interface10_bank_bus_we);
	end
end
assign csrbank10_done_r = interface10_bank_bus_dat_w[0];
always @(*) begin
	csrbank10_done_re <= 1'd0;
	csrbank10_done_we <= 1'd0;
	if ((csrbank10_sel & (interface10_bank_bus_adr[8:0] == 2'd2))) begin
		csrbank10_done_re <= interface10_bank_bus_we;
		csrbank10_done_we <= (~interface10_bank_bus_we);
	end
end
assign csrbank10_init0_w = init_storage;
assign csrbank10_tiempo_w = tiempo_status[15:0];
assign tiempo_we = csrbank10_tiempo_we;
assign csrbank10_done_w = done_status;
assign done_we = csrbank10_done_we;
assign csr_interconnect_adr = basesoc_adr;
assign csr_interconnect_we = basesoc_we;
assign csr_interconnect_dat_w = basesoc_dat_w;
assign basesoc_dat_r = csr_interconnect_dat_r;
assign interface0_bank_bus_adr = csr_interconnect_adr;
assign interface1_bank_bus_adr = csr_interconnect_adr;
assign interface2_bank_bus_adr = csr_interconnect_adr;
assign interface3_bank_bus_adr = csr_interconnect_adr;
assign interface4_bank_bus_adr = csr_interconnect_adr;
assign interface5_bank_bus_adr = csr_interconnect_adr;
assign interface6_bank_bus_adr = csr_interconnect_adr;
assign interface7_bank_bus_adr = csr_interconnect_adr;
assign interface8_bank_bus_adr = csr_interconnect_adr;
assign interface9_bank_bus_adr = csr_interconnect_adr;
assign interface10_bank_bus_adr = csr_interconnect_adr;
assign interface0_bank_bus_we = csr_interconnect_we;
assign interface1_bank_bus_we = csr_interconnect_we;
assign interface2_bank_bus_we = csr_interconnect_we;
assign interface3_bank_bus_we = csr_interconnect_we;
assign interface4_bank_bus_we = csr_interconnect_we;
assign interface5_bank_bus_we = csr_interconnect_we;
assign interface6_bank_bus_we = csr_interconnect_we;
assign interface7_bank_bus_we = csr_interconnect_we;
assign interface8_bank_bus_we = csr_interconnect_we;
assign interface9_bank_bus_we = csr_interconnect_we;
assign interface10_bank_bus_we = csr_interconnect_we;
assign interface0_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface1_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface2_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface3_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface4_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface5_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface6_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface7_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface8_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface9_bank_bus_dat_w = csr_interconnect_dat_w;
assign interface10_bank_bus_dat_w = csr_interconnect_dat_w;
assign csr_interconnect_dat_r = ((((((((((interface0_bank_bus_dat_r | interface1_bank_bus_dat_r) | interface2_bank_bus_dat_r) | interface3_bank_bus_dat_r) | interface4_bank_bus_dat_r) | interface5_bank_bus_dat_r) | interface6_bank_bus_dat_r) | interface7_bank_bus_dat_r) | interface8_bank_bus_dat_r) | interface9_bank_bus_dat_r) | interface10_bank_bus_dat_r);
always @(*) begin
	array_muxed0 <= 30'd0;
	case (grant)
		default: begin
			array_muxed0 <= picorv32_idbus_adr;
		end
	endcase
end
always @(*) begin
	array_muxed1 <= 32'd0;
	case (grant)
		default: begin
			array_muxed1 <= picorv32_idbus_dat_w;
		end
	endcase
end
always @(*) begin
	array_muxed2 <= 4'd0;
	case (grant)
		default: begin
			array_muxed2 <= picorv32_idbus_sel;
		end
	endcase
end
always @(*) begin
	array_muxed3 <= 1'd0;
	case (grant)
		default: begin
			array_muxed3 <= picorv32_idbus_cyc;
		end
	endcase
end
always @(*) begin
	array_muxed4 <= 1'd0;
	case (grant)
		default: begin
			array_muxed4 <= picorv32_idbus_stb;
		end
	endcase
end
always @(*) begin
	array_muxed5 <= 1'd0;
	case (grant)
		default: begin
			array_muxed5 <= picorv32_idbus_we;
		end
	endcase
end
always @(*) begin
	array_muxed6 <= 3'd0;
	case (grant)
		default: begin
			array_muxed6 <= picorv32_idbus_cti;
		end
	endcase
end
always @(*) begin
	array_muxed7 <= 2'd0;
	case (grant)
		default: begin
			array_muxed7 <= picorv32_idbus_bte;
		end
	endcase
end
assign rx_rx = xilinxmultiregimpl0_regs1;
assign buttons_status = xilinxmultiregimpl1_regs1;
assign xilinxmultiregimpl1 = {btnl, btnr, btnc};
assign infrarojo_status = xilinxmultiregimpl2_regs1;
assign xilinxmultiregimpl2 = {infrarojol, infrarojor, infrarojoc};

always @(posedge por_clk) begin
	int_rst <= (~cpu_reset);
end

always @(posedge sys_clk) begin
	if ((bus_errors != 32'd4294967295)) begin
		if (bus_error) begin
			bus_errors <= (bus_errors + 1'd1);
		end
	end
	ram_bus_ack <= 1'd0;
	if (((ram_bus_cyc & ram_bus_stb) & (~ram_bus_ack))) begin
		ram_bus_ack <= 1'd1;
	end
	interface0_ram_bus_ack <= 1'd0;
	if (((interface0_ram_bus_cyc & interface0_ram_bus_stb) & (~interface0_ram_bus_ack))) begin
		interface0_ram_bus_ack <= 1'd1;
	end
	interface1_ram_bus_ack <= 1'd0;
	if (((interface1_ram_bus_cyc & interface1_ram_bus_stb) & (~interface1_ram_bus_ack))) begin
		interface1_ram_bus_ack <= 1'd1;
	end
	{tx_tick, tx_phase} <= 23'd4947802;
	if (tx_enable) begin
		{tx_tick, tx_phase} <= (tx_phase + 23'd4947802);
	end
	rs232phytx_state <= rs232phytx_next_state;
	if (tx_count_rs232phytx_next_value_ce0) begin
		tx_count <= tx_count_rs232phytx_next_value0;
	end
	if (serial_tx_rs232phytx_next_value_ce1) begin
		serial_tx <= serial_tx_rs232phytx_next_value1;
	end
	if (tx_data_rs232phytx_next_value_ce2) begin
		tx_data <= tx_data_rs232phytx_next_value2;
	end
	rx_rx_d <= rx_rx;
	{rx_tick, rx_phase} <= 32'd2147483648;
	if (rx_enable) begin
		{rx_tick, rx_phase} <= (rx_phase + 23'd4947802);
	end
	rs232phyrx_state <= rs232phyrx_next_state;
	if (rx_count_rs232phyrx_next_value_ce0) begin
		rx_count <= rx_count_rs232phyrx_next_value0;
	end
	if (rx_data_rs232phyrx_next_value_ce1) begin
		rx_data <= rx_data_rs232phyrx_next_value1;
	end
	if (uart_tx_clear) begin
		uart_tx_pending <= 1'd0;
	end
	uart_tx_trigger_d <= uart_tx_trigger;
	if ((uart_tx_trigger & (~uart_tx_trigger_d))) begin
		uart_tx_pending <= 1'd1;
	end
	if (uart_rx_clear) begin
		uart_rx_pending <= 1'd0;
	end
	uart_rx_trigger_d <= uart_rx_trigger;
	if ((uart_rx_trigger & (~uart_rx_trigger_d))) begin
		uart_rx_pending <= 1'd1;
	end
	if (uart_tx_fifo_syncfifo_re) begin
		uart_tx_fifo_readable <= 1'd1;
	end else begin
		if (uart_tx_fifo_re) begin
			uart_tx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		uart_tx_fifo_produce <= (uart_tx_fifo_produce + 1'd1);
	end
	if (uart_tx_fifo_do_read) begin
		uart_tx_fifo_consume <= (uart_tx_fifo_consume + 1'd1);
	end
	if (((uart_tx_fifo_syncfifo_we & uart_tx_fifo_syncfifo_writable) & (~uart_tx_fifo_replace))) begin
		if ((~uart_tx_fifo_do_read)) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_tx_fifo_do_read) begin
			uart_tx_fifo_level0 <= (uart_tx_fifo_level0 - 1'd1);
		end
	end
	if (uart_rx_fifo_syncfifo_re) begin
		uart_rx_fifo_readable <= 1'd1;
	end else begin
		if (uart_rx_fifo_re) begin
			uart_rx_fifo_readable <= 1'd0;
		end
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		uart_rx_fifo_produce <= (uart_rx_fifo_produce + 1'd1);
	end
	if (uart_rx_fifo_do_read) begin
		uart_rx_fifo_consume <= (uart_rx_fifo_consume + 1'd1);
	end
	if (((uart_rx_fifo_syncfifo_we & uart_rx_fifo_syncfifo_writable) & (~uart_rx_fifo_replace))) begin
		if ((~uart_rx_fifo_do_read)) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 + 1'd1);
		end
	end else begin
		if (uart_rx_fifo_do_read) begin
			uart_rx_fifo_level0 <= (uart_rx_fifo_level0 - 1'd1);
		end
	end
	if (timer_en_storage) begin
		if ((timer_value == 1'd0)) begin
			timer_value <= timer_reload_storage;
		end else begin
			timer_value <= (timer_value - 1'd1);
		end
	end else begin
		timer_value <= timer_load_storage;
	end
	if (timer_update_value_re) begin
		timer_value_status <= timer_value;
	end
	if (timer_zero_clear) begin
		timer_zero_pending <= 1'd0;
	end
	timer_zero_trigger_d <= timer_zero_trigger;
	if ((timer_zero_trigger & (~timer_zero_trigger_d))) begin
		timer_zero_pending <= 1'd1;
	end
	if (UARTB_TXDONE_clear) begin
		UARTB_TXDONE_pending <= 1'd0;
	end
	UARTB_TXDONE_trigger_d <= UARTB_TXDONE_trigger;
	if ((UARTB_TXDONE_trigger & (~UARTB_TXDONE_trigger_d))) begin
		UARTB_TXDONE_pending <= 1'd1;
	end
	if (UARTB_RXAVAILABLE_clear) begin
		UARTB_RXAVAILABLE_pending <= 1'd0;
	end
	UARTB_RXAVAILABLE_trigger_d <= UARTB_RXAVAILABLE_trigger;
	if ((UARTB_RXAVAILABLE_trigger & (~UARTB_RXAVAILABLE_trigger_d))) begin
		UARTB_RXAVAILABLE_pending <= 1'd1;
	end
	if (UARTA_TXDONE_clear) begin
		UARTA_TXDONE_pending <= 1'd0;
	end
	UARTA_TXDONE_trigger_d <= UARTA_TXDONE_trigger;
	if ((UARTA_TXDONE_trigger & (~UARTA_TXDONE_trigger_d))) begin
		UARTA_TXDONE_pending <= 1'd1;
	end
	if (UARTA_RXAVAILABLE_clear) begin
		UARTA_RXAVAILABLE_pending <= 1'd0;
	end
	UARTA_RXAVAILABLE_trigger_d <= UARTA_RXAVAILABLE_trigger;
	if ((UARTA_RXAVAILABLE_trigger & (~UARTA_RXAVAILABLE_trigger_d))) begin
		UARTA_RXAVAILABLE_pending <= 1'd1;
	end
	state <= next_state;
	slave_sel_r <= slave_sel;
	if (wait_1) begin
		if ((~done)) begin
			count <= (count - 1'd1);
		end
	end else begin
		count <= 20'd1000000;
	end
	interface0_bank_bus_dat_r <= 1'd0;
	if (csrbank0_sel) begin
		case (interface0_bank_bus_adr[8:0])
			1'd0: begin
				interface0_bank_bus_dat_r <= csrbank0_Baudios0_w;
			end
			1'd1: begin
				interface0_bank_bus_dat_r <= csrbank0_TxInit0_w;
			end
			2'd2: begin
				interface0_bank_bus_dat_r <= csrbank0_TxData0_w;
			end
			2'd3: begin
				interface0_bank_bus_dat_r <= csrbank0_RxData_w;
			end
			3'd4: begin
				interface0_bank_bus_dat_r <= csrbank0_TxDone_w;
			end
			3'd5: begin
				interface0_bank_bus_dat_r <= csrbank0_RxAvailable_w;
			end
			3'd6: begin
				interface0_bank_bus_dat_r <= csrbank0_ev_status_w;
			end
			3'd7: begin
				interface0_bank_bus_dat_r <= csrbank0_ev_pending_w;
			end
			4'd8: begin
				interface0_bank_bus_dat_r <= csrbank0_ev_enable0_w;
			end
		endcase
	end
	if (csrbank0_Baudios0_re) begin
		UARTA_Baudios_storage[15:0] <= csrbank0_Baudios0_r;
	end
	UARTA_Baudios_re <= csrbank0_Baudios0_re;
	if (csrbank0_TxInit0_re) begin
		UARTA_TxInit_storage <= csrbank0_TxInit0_r;
	end
	UARTA_TxInit_re <= csrbank0_TxInit0_re;
	if (csrbank0_TxData0_re) begin
		UARTA_TxData_storage[7:0] <= csrbank0_TxData0_r;
	end
	UARTA_TxData_re <= csrbank0_TxData0_re;
	UARTA_RxData_re <= csrbank0_RxData_re;
	UARTA_TxDone_re <= csrbank0_TxDone_re;
	UARTA_RxAvailable_re <= csrbank0_RxAvailable_re;
	UARTA_status_re <= csrbank0_ev_status_re;
	if (csrbank0_ev_pending_re) begin
		UARTA_pending_r[1:0] <= csrbank0_ev_pending_r;
	end
	UARTA_pending_re <= csrbank0_ev_pending_re;
	if (csrbank0_ev_enable0_re) begin
		UARTA_enable_storage[1:0] <= csrbank0_ev_enable0_r;
	end
	UARTA_enable_re <= csrbank0_ev_enable0_re;
	interface1_bank_bus_dat_r <= 1'd0;
	if (csrbank1_sel) begin
		case (interface1_bank_bus_adr[8:0])
			1'd0: begin
				interface1_bank_bus_dat_r <= csrbank1_Baudios0_w;
			end
			1'd1: begin
				interface1_bank_bus_dat_r <= csrbank1_TxInit0_w;
			end
			2'd2: begin
				interface1_bank_bus_dat_r <= csrbank1_TxData0_w;
			end
			2'd3: begin
				interface1_bank_bus_dat_r <= csrbank1_RxData_w;
			end
			3'd4: begin
				interface1_bank_bus_dat_r <= csrbank1_TxDone_w;
			end
			3'd5: begin
				interface1_bank_bus_dat_r <= csrbank1_RxAvailable_w;
			end
			3'd6: begin
				interface1_bank_bus_dat_r <= csrbank1_ev_status_w;
			end
			3'd7: begin
				interface1_bank_bus_dat_r <= csrbank1_ev_pending_w;
			end
			4'd8: begin
				interface1_bank_bus_dat_r <= csrbank1_ev_enable0_w;
			end
		endcase
	end
	if (csrbank1_Baudios0_re) begin
		UARTB_Baudios_storage[15:0] <= csrbank1_Baudios0_r;
	end
	UARTB_Baudios_re <= csrbank1_Baudios0_re;
	if (csrbank1_TxInit0_re) begin
		UARTB_TxInit_storage <= csrbank1_TxInit0_r;
	end
	UARTB_TxInit_re <= csrbank1_TxInit0_re;
	if (csrbank1_TxData0_re) begin
		UARTB_TxData_storage[7:0] <= csrbank1_TxData0_r;
	end
	UARTB_TxData_re <= csrbank1_TxData0_re;
	UARTB_RxData_re <= csrbank1_RxData_re;
	UARTB_TxDone_re <= csrbank1_TxDone_re;
	UARTB_RxAvailable_re <= csrbank1_RxAvailable_re;
	UARTB_status_re <= csrbank1_ev_status_re;
	if (csrbank1_ev_pending_re) begin
		UARTB_pending_r[1:0] <= csrbank1_ev_pending_r;
	end
	UARTB_pending_re <= csrbank1_ev_pending_re;
	if (csrbank1_ev_enable0_re) begin
		UARTB_enable_storage[1:0] <= csrbank1_ev_enable0_r;
	end
	UARTB_enable_re <= csrbank1_ev_enable0_re;
	interface2_bank_bus_dat_r <= 1'd0;
	if (csrbank2_sel) begin
		case (interface2_bank_bus_adr[8:0])
			1'd0: begin
				interface2_bank_bus_dat_r <= csrbank2_Forma_w;
			end
			1'd1: begin
				interface2_bank_bus_dat_r <= csrbank2_PromedioColor_w;
			end
			2'd2: begin
				interface2_bank_bus_dat_r <= csrbank2_MapaData0_w;
			end
			2'd3: begin
				interface2_bank_bus_dat_r <= csrbank2_MapaAddr0_w;
			end
			3'd4: begin
				interface2_bank_bus_dat_r <= csrbank2_MapaWrite0_w;
			end
		endcase
	end
	Forma_re <= csrbank2_Forma_re;
	PromedioColor_re <= csrbank2_PromedioColor_re;
	if (csrbank2_MapaData0_re) begin
		MapaData_storage[3:0] <= csrbank2_MapaData0_r;
	end
	MapaData_re <= csrbank2_MapaData0_re;
	if (csrbank2_MapaAddr0_re) begin
		MapaAddr_storage[5:0] <= csrbank2_MapaAddr0_r;
	end
	MapaAddr_re <= csrbank2_MapaAddr0_re;
	if (csrbank2_MapaWrite0_re) begin
		MapaWrite_storage <= csrbank2_MapaWrite0_r;
	end
	MapaWrite_re <= csrbank2_MapaWrite0_re;
	interface3_bank_bus_dat_r <= 1'd0;
	if (csrbank3_sel) begin
		case (interface3_bank_bus_adr[8:0])
			1'd0: begin
				interface3_bank_bus_dat_r <= csrbank3_in_w;
			end
		endcase
	end
	buttons_re <= csrbank3_in_re;
	interface4_bank_bus_dat_r <= 1'd0;
	if (csrbank4_sel) begin
		case (interface4_bank_bus_adr[8:0])
			1'd0: begin
				interface4_bank_bus_dat_r <= csrbank4_reset0_w;
			end
			1'd1: begin
				interface4_bank_bus_dat_r <= csrbank4_scratch0_w;
			end
			2'd2: begin
				interface4_bank_bus_dat_r <= csrbank4_bus_errors_w;
			end
		endcase
	end
	if (csrbank4_reset0_re) begin
		reset_storage[1:0] <= csrbank4_reset0_r;
	end
	reset_re <= csrbank4_reset0_re;
	if (csrbank4_scratch0_re) begin
		scratch_storage[31:0] <= csrbank4_scratch0_r;
	end
	scratch_re <= csrbank4_scratch0_re;
	bus_errors_re <= csrbank4_bus_errors_re;
	interface5_bank_bus_dat_r <= 1'd0;
	if (csrbank5_sel) begin
		case (interface5_bank_bus_adr[8:0])
			1'd0: begin
				interface5_bank_bus_dat_r <= csrbank5_in_w;
			end
		endcase
	end
	infrarojo_re <= csrbank5_in_re;
	interface6_bank_bus_dat_r <= 1'd0;
	if (csrbank6_sel) begin
		case (interface6_bank_bus_adr[8:0])
			1'd0: begin
				interface6_bank_bus_dat_r <= csrbank6_movimiento0_w;
			end
		endcase
	end
	if (csrbank6_movimiento0_re) begin
		motores_storage[2:0] <= csrbank6_movimiento0_r;
	end
	motores_re <= csrbank6_movimiento0_re;
	interface7_bank_bus_dat_r <= 1'd0;
	if (csrbank7_sel) begin
		case (interface7_bank_bus_adr[8:0])
			1'd0: begin
				interface7_bank_bus_dat_r <= csrbank7_enable0_w;
			end
			1'd1: begin
				interface7_bank_bus_dat_r <= csrbank7_dutty0_w;
			end
			2'd2: begin
				interface7_bank_bus_dat_r <= csrbank7_period0_w;
			end
		endcase
	end
	if (csrbank7_enable0_re) begin
		servo_cntrl_enable_storage <= csrbank7_enable0_r;
	end
	servo_cntrl_enable_re <= csrbank7_enable0_re;
	if (csrbank7_dutty0_re) begin
		servo_cntrl_dutty_storage[15:0] <= csrbank7_dutty0_r;
	end
	servo_cntrl_dutty_re <= csrbank7_dutty0_re;
	if (csrbank7_period0_re) begin
		servo_cntrl_period_storage[15:0] <= csrbank7_period0_r;
	end
	servo_cntrl_period_re <= csrbank7_period0_re;
	interface8_bank_bus_dat_r <= 1'd0;
	if (csrbank8_sel) begin
		case (interface8_bank_bus_adr[8:0])
			1'd0: begin
				interface8_bank_bus_dat_r <= csrbank8_load0_w;
			end
			1'd1: begin
				interface8_bank_bus_dat_r <= csrbank8_reload0_w;
			end
			2'd2: begin
				interface8_bank_bus_dat_r <= csrbank8_en0_w;
			end
			2'd3: begin
				interface8_bank_bus_dat_r <= csrbank8_update_value0_w;
			end
			3'd4: begin
				interface8_bank_bus_dat_r <= csrbank8_value_w;
			end
			3'd5: begin
				interface8_bank_bus_dat_r <= csrbank8_ev_status_w;
			end
			3'd6: begin
				interface8_bank_bus_dat_r <= csrbank8_ev_pending_w;
			end
			3'd7: begin
				interface8_bank_bus_dat_r <= csrbank8_ev_enable0_w;
			end
		endcase
	end
	if (csrbank8_load0_re) begin
		timer_load_storage[31:0] <= csrbank8_load0_r;
	end
	timer_load_re <= csrbank8_load0_re;
	if (csrbank8_reload0_re) begin
		timer_reload_storage[31:0] <= csrbank8_reload0_r;
	end
	timer_reload_re <= csrbank8_reload0_re;
	if (csrbank8_en0_re) begin
		timer_en_storage <= csrbank8_en0_r;
	end
	timer_en_re <= csrbank8_en0_re;
	if (csrbank8_update_value0_re) begin
		timer_update_value_storage <= csrbank8_update_value0_r;
	end
	timer_update_value_re <= csrbank8_update_value0_re;
	timer_value_re <= csrbank8_value_re;
	timer_status_re <= csrbank8_ev_status_re;
	if (csrbank8_ev_pending_re) begin
		timer_pending_r <= csrbank8_ev_pending_r;
	end
	timer_pending_re <= csrbank8_ev_pending_re;
	if (csrbank8_ev_enable0_re) begin
		timer_enable_storage <= csrbank8_ev_enable0_r;
	end
	timer_enable_re <= csrbank8_ev_enable0_re;
	interface9_bank_bus_dat_r <= 1'd0;
	if (csrbank9_sel) begin
		case (interface9_bank_bus_adr[8:0])
			1'd0: begin
				interface9_bank_bus_dat_r <= uart_rxtx_w;
			end
			1'd1: begin
				interface9_bank_bus_dat_r <= csrbank9_txfull_w;
			end
			2'd2: begin
				interface9_bank_bus_dat_r <= csrbank9_rxempty_w;
			end
			2'd3: begin
				interface9_bank_bus_dat_r <= csrbank9_ev_status_w;
			end
			3'd4: begin
				interface9_bank_bus_dat_r <= csrbank9_ev_pending_w;
			end
			3'd5: begin
				interface9_bank_bus_dat_r <= csrbank9_ev_enable0_w;
			end
			3'd6: begin
				interface9_bank_bus_dat_r <= csrbank9_txempty_w;
			end
			3'd7: begin
				interface9_bank_bus_dat_r <= csrbank9_rxfull_w;
			end
		endcase
	end
	uart_txfull_re <= csrbank9_txfull_re;
	uart_rxempty_re <= csrbank9_rxempty_re;
	uart_status_re <= csrbank9_ev_status_re;
	if (csrbank9_ev_pending_re) begin
		uart_pending_r[1:0] <= csrbank9_ev_pending_r;
	end
	uart_pending_re <= csrbank9_ev_pending_re;
	if (csrbank9_ev_enable0_re) begin
		uart_enable_storage[1:0] <= csrbank9_ev_enable0_r;
	end
	uart_enable_re <= csrbank9_ev_enable0_re;
	uart_txempty_re <= csrbank9_txempty_re;
	uart_rxfull_re <= csrbank9_rxfull_re;
	interface10_bank_bus_dat_r <= 1'd0;
	if (csrbank10_sel) begin
		case (interface10_bank_bus_adr[8:0])
			1'd0: begin
				interface10_bank_bus_dat_r <= csrbank10_init0_w;
			end
			1'd1: begin
				interface10_bank_bus_dat_r <= csrbank10_tiempo_w;
			end
			2'd2: begin
				interface10_bank_bus_dat_r <= csrbank10_done_w;
			end
		endcase
	end
	if (csrbank10_init0_re) begin
		init_storage <= csrbank10_init0_r;
	end
	init_re <= csrbank10_init0_re;
	tiempo_re <= csrbank10_tiempo_re;
	done_re <= csrbank10_done_re;
	if (sys_rst) begin
		reset_storage <= 2'd0;
		reset_re <= 1'd0;
		scratch_storage <= 32'd305419896;
		scratch_re <= 1'd0;
		bus_errors_re <= 1'd0;
		bus_errors <= 32'd0;
		ram_bus_ack <= 1'd0;
		interface0_ram_bus_ack <= 1'd0;
		interface1_ram_bus_ack <= 1'd0;
		serial_tx <= 1'd0;
		tx_tick <= 1'd0;
		rx_tick <= 1'd0;
		rx_rx_d <= 1'd0;
		uart_txfull_re <= 1'd0;
		uart_rxempty_re <= 1'd0;
		uart_tx_pending <= 1'd0;
		uart_tx_trigger_d <= 1'd0;
		uart_rx_pending <= 1'd0;
		uart_rx_trigger_d <= 1'd0;
		uart_status_re <= 1'd0;
		uart_pending_re <= 1'd0;
		uart_pending_r <= 2'd0;
		uart_enable_storage <= 2'd0;
		uart_enable_re <= 1'd0;
		uart_txempty_re <= 1'd0;
		uart_rxfull_re <= 1'd0;
		uart_tx_fifo_readable <= 1'd0;
		uart_tx_fifo_level0 <= 5'd0;
		uart_tx_fifo_produce <= 4'd0;
		uart_tx_fifo_consume <= 4'd0;
		uart_rx_fifo_readable <= 1'd0;
		uart_rx_fifo_level0 <= 5'd0;
		uart_rx_fifo_produce <= 4'd0;
		uart_rx_fifo_consume <= 4'd0;
		timer_load_storage <= 32'd0;
		timer_load_re <= 1'd0;
		timer_reload_storage <= 32'd0;
		timer_reload_re <= 1'd0;
		timer_en_storage <= 1'd0;
		timer_en_re <= 1'd0;
		timer_update_value_storage <= 1'd0;
		timer_update_value_re <= 1'd0;
		timer_value_status <= 32'd0;
		timer_value_re <= 1'd0;
		timer_zero_pending <= 1'd0;
		timer_zero_trigger_d <= 1'd0;
		timer_status_re <= 1'd0;
		timer_pending_re <= 1'd0;
		timer_pending_r <= 1'd0;
		timer_enable_storage <= 1'd0;
		timer_enable_re <= 1'd0;
		timer_value <= 32'd0;
		buttons_re <= 1'd0;
		servo_cntrl_enable_storage <= 1'd0;
		servo_cntrl_enable_re <= 1'd0;
		servo_cntrl_dutty_storage <= 16'd0;
		servo_cntrl_dutty_re <= 1'd0;
		servo_cntrl_period_storage <= 16'd0;
		servo_cntrl_period_re <= 1'd0;
		init_storage <= 1'd0;
		init_re <= 1'd0;
		tiempo_re <= 1'd0;
		done_re <= 1'd0;
		infrarojo_re <= 1'd0;
		motores_storage <= 3'd0;
		motores_re <= 1'd0;
		Forma_re <= 1'd0;
		PromedioColor_re <= 1'd0;
		MapaData_storage <= 4'd0;
		MapaData_re <= 1'd0;
		MapaAddr_storage <= 6'd0;
		MapaAddr_re <= 1'd0;
		MapaWrite_storage <= 1'd0;
		MapaWrite_re <= 1'd0;
		UARTB_Baudios_storage <= 16'd0;
		UARTB_Baudios_re <= 1'd0;
		UARTB_TxInit_storage <= 1'd0;
		UARTB_TxInit_re <= 1'd0;
		UARTB_TxData_storage <= 8'd0;
		UARTB_TxData_re <= 1'd0;
		UARTB_RxData_re <= 1'd0;
		UARTB_TxDone_re <= 1'd0;
		UARTB_RxAvailable_re <= 1'd0;
		UARTB_TXDONE_pending <= 1'd0;
		UARTB_TXDONE_trigger_d <= 1'd0;
		UARTB_RXAVAILABLE_pending <= 1'd0;
		UARTB_RXAVAILABLE_trigger_d <= 1'd0;
		UARTB_status_re <= 1'd0;
		UARTB_pending_re <= 1'd0;
		UARTB_pending_r <= 2'd0;
		UARTB_enable_storage <= 2'd0;
		UARTB_enable_re <= 1'd0;
		UARTA_Baudios_storage <= 16'd0;
		UARTA_Baudios_re <= 1'd0;
		UARTA_TxInit_storage <= 1'd0;
		UARTA_TxInit_re <= 1'd0;
		UARTA_TxData_storage <= 8'd0;
		UARTA_TxData_re <= 1'd0;
		UARTA_RxData_re <= 1'd0;
		UARTA_TxDone_re <= 1'd0;
		UARTA_RxAvailable_re <= 1'd0;
		UARTA_TXDONE_pending <= 1'd0;
		UARTA_TXDONE_trigger_d <= 1'd0;
		UARTA_RXAVAILABLE_pending <= 1'd0;
		UARTA_RXAVAILABLE_trigger_d <= 1'd0;
		UARTA_status_re <= 1'd0;
		UARTA_pending_re <= 1'd0;
		UARTA_pending_r <= 2'd0;
		UARTA_enable_storage <= 2'd0;
		UARTA_enable_re <= 1'd0;
		rs232phytx_state <= 1'd0;
		rs232phyrx_state <= 1'd0;
		slave_sel_r <= 4'd0;
		count <= 20'd1000000;
		state <= 1'd0;
	end
	xilinxmultiregimpl0_regs0 <= serial_rx;
	xilinxmultiregimpl0_regs1 <= xilinxmultiregimpl0_regs0;
	xilinxmultiregimpl1_regs0 <= {btnl, btnr, btnc};
	xilinxmultiregimpl1_regs1 <= xilinxmultiregimpl1_regs0;
	xilinxmultiregimpl2_regs0 <= {infrarojol, infrarojor, infrarojoc};
	xilinxmultiregimpl2_regs1 <= xilinxmultiregimpl2_regs0;
end

reg [31:0] mem[0:5743];
reg [31:0] memdat;
always @(posedge sys_clk) begin
	memdat <= mem[adr];
end

assign dat_r = memdat;

initial begin
	$readmemh("mem.init", mem);
end

reg [31:0] mem_1[0:2047];
reg [10:0] memadr;
always @(posedge sys_clk) begin
	if (sram0_we[0])
		mem_1[sram0_adr][7:0] <= sram0_dat_w[7:0];
	if (sram0_we[1])
		mem_1[sram0_adr][15:8] <= sram0_dat_w[15:8];
	if (sram0_we[2])
		mem_1[sram0_adr][23:16] <= sram0_dat_w[23:16];
	if (sram0_we[3])
		mem_1[sram0_adr][31:24] <= sram0_dat_w[31:24];
	memadr <= sram0_adr;
end

assign sram0_dat_r = mem_1[memadr];

initial begin
	$readmemh("mem_1.init", mem_1);
end

reg [31:0] mem_2[0:3327];
reg [11:0] memadr_1;
always @(posedge sys_clk) begin
	if (sram1_we[0])
		mem_2[sram1_adr][7:0] <= sram1_dat_w[7:0];
	if (sram1_we[1])
		mem_2[sram1_adr][15:8] <= sram1_dat_w[15:8];
	if (sram1_we[2])
		mem_2[sram1_adr][23:16] <= sram1_dat_w[23:16];
	if (sram1_we[3])
		mem_2[sram1_adr][31:24] <= sram1_dat_w[31:24];
	memadr_1 <= sram1_adr;
end

assign sram1_dat_r = mem_2[memadr_1];

initial begin
	$readmemh("mem_2.init", mem_2);
end

reg [9:0] storage[0:15];
reg [9:0] memdat_1;
reg [9:0] memdat_2;
always @(posedge sys_clk) begin
	if (uart_tx_fifo_wrport_we)
		storage[uart_tx_fifo_wrport_adr] <= uart_tx_fifo_wrport_dat_w;
	memdat_1 <= storage[uart_tx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (uart_tx_fifo_rdport_re)
		memdat_2 <= storage[uart_tx_fifo_rdport_adr];
end

assign uart_tx_fifo_wrport_dat_r = memdat_1;
assign uart_tx_fifo_rdport_dat_r = memdat_2;

reg [9:0] storage_1[0:15];
reg [9:0] memdat_3;
reg [9:0] memdat_4;
always @(posedge sys_clk) begin
	if (uart_rx_fifo_wrport_we)
		storage_1[uart_rx_fifo_wrport_adr] <= uart_rx_fifo_wrport_dat_w;
	memdat_3 <= storage_1[uart_rx_fifo_wrport_adr];
end

always @(posedge sys_clk) begin
	if (uart_rx_fifo_rdport_re)
		memdat_4 <= storage_1[uart_rx_fifo_rdport_adr];
end

assign uart_rx_fifo_wrport_dat_r = memdat_3;
assign uart_rx_fifo_rdport_dat_r = memdat_4;

pwm pwm(
	.clk(sys_clk),
	.dutty(servo_cntrl_dutty_storage),
	.enable(servo_cntrl_enable_storage),
	.period(servo_cntrl_period_storage),
	.pwm_out(servo_out)
);

ultrasonido ultrasonido(
	.clk(sys_clk),
	.eco(echo),
	.init(init_storage),
	.done(done_status),
	.tiempo(tiempo_status),
	.trigger(trigger)
);

motores motores(
	.clk(sys_clk),
	.movimiento(motores_storage),
	.rst(sys_rst),
	.motorA({motorA1, motorA0}),
	.motorB({motorB1, motorB0}),
	.pwm1(pwm1),
	.pwm2(pwm2)
);

CamaraVGADriver CamaraVGADriver(
	.Clock(sys_clk),
	.Data({Data7, Data6, Data5, Data4, Data3, Data2, Data1, Data0}),
	.Href(Href0),
	.MapaAddr(MapaAddr_storage),
	.MapaData(MapaData_storage),
	.MapaWrite(MapaWrite_storage),
	.Pclock(Aclock0),
	.Reset(sys_rst),
	.Vsync_cam(Vsync_cam0),
	.Forma(Forma_status),
	.Hsync(hsync0),
	.PromedioColor(PromedioColor_status),
	.RGB({vga11, vga10, vga9, vga8, vga7, vga6, vga5, vga4, vga3, vga2, vga1, vga0}),
	.Vsync(vsync0),
	.XClock(XClock0)
);

Uart Uart(
	.Baudios(UARTB_Baudios_storage),
	.Clock(sys_clk),
	.Reset(sys_rst),
	.Rx(UARTB10),
	.TxData(UARTB_TxData_storage),
	.TxInit(UARTB_TxInit_storage),
	.RxAvailable(UARTB_RxAvailable_status),
	.RxData(UARTB_RxData_status),
	.Tx(UARTB11),
	.TxDone(UARTB_TxDone_status)
);

Uart Uart_1(
	.Baudios(UARTA_Baudios_storage),
	.Clock(sys_clk),
	.Reset(sys_rst),
	.Rx(UARTA10),
	.TxData(UARTA_TxData_storage),
	.TxInit(UARTA_TxInit_storage),
	.RxAvailable(UARTA_RxAvailable_status),
	.RxData(UARTA_RxData_status),
	.Tx(UARTA11),
	.TxDone(UARTA_TxDone_status)
);

picorv32 #(
	.CATCH_ILLINSN(1'd1),
	.CATCH_MISALIGN(1'd1),
	.ENABLE_COUNTERS(1'd1),
	.ENABLE_COUNTERS64(1'd1),
	.ENABLE_DIV(1'd1),
	.ENABLE_FAST_MUL(1'd0),
	.ENABLE_IRQ(1'd1),
	.ENABLE_IRQ_QREGS(1'd1),
	.ENABLE_IRQ_TIMER(1'd1),
	.ENABLE_MUL(1'd1),
	.ENABLE_PCPI(1'd0),
	.ENABLE_REGS_16_31(1'd1),
	.ENABLE_REGS_DUALPORT(1'd1),
	.ENABLE_TRACE(1'd0),
	.LATCHED_IRQ(32'd4294967295),
	.LATCHED_MEM_RDATA(1'd0),
	.MASKED_IRQ(1'd0),
	.PROGADDR_IRQ(5'd16),
	.PROGADDR_RESET(1'd0),
	.STACKADDR(32'd4294967295),
	.TWO_CYCLE_ALU(1'd0),
	.TWO_CYCLE_COMPARE(1'd0),
	.TWO_STAGE_SHIFT(1'd1)
) picorv32 (
	.clk(sys_clk),
	.irq(picorv32_interrupt),
	.mem_rdata(picorv32_mem_rdata),
	.mem_ready(picorv32_mem_ready),
	.pcpi_rd(1'd0),
	.pcpi_ready(1'd0),
	.pcpi_wait(1'd0),
	.pcpi_wr(1'd0),
	.resetn((~(sys_rst | picorv32_reset))),
	.eoi(picorv329),
	.mem_addr(picorv32_mem_addr),
	.mem_instr(picorv32_mem_instr),
	.mem_la_addr(picorv322),
	.mem_la_read(picorv320),
	.mem_la_wdata(picorv323),
	.mem_la_write(picorv321),
	.mem_la_wstrb(picorv324),
	.mem_valid(picorv32_mem_valid),
	.mem_wdata(picorv32_mem_wdata),
	.mem_wstrb(picorv32_mem_wstrb),
	.pcpi_insn(picorv326),
	.pcpi_rs1(picorv327),
	.pcpi_rs2(picorv328),
	.pcpi_valid(picorv325),
	.trap(picorv32_trap)
);

endmodule
