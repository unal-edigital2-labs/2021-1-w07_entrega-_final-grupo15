//--------------------------------------------------------------------------------
// Auto-generated by Migen (3ffd64c) & LiteX (23afca3d) on 2021-08-02 19:41:25
//--------------------------------------------------------------------------------
#include <generated/soc.h>
#ifndef __GENERATED_CSR_H
#define __GENERATED_CSR_H
#include <stdint.h>
#include <system.h>
#ifndef CSR_ACCESSORS_DEFINED
#include <hw/common.h>
#endif /* ! CSR_ACCESSORS_DEFINED */
#ifndef CSR_BASE
#define CSR_BASE 0x82000000L
#endif

/* buttons */
#define CSR_BUTTONS_BASE (CSR_BASE + 0x0L)
#define CSR_BUTTONS_IN_ADDR (CSR_BASE + 0x0L)
#define CSR_BUTTONS_IN_SIZE 1
static inline uint32_t buttons_in_read(void) {
	return csr_read_simple(CSR_BASE + 0x0L);
}

/* servo_cntrl */
#define CSR_SERVO_CNTRL_BASE (CSR_BASE + 0x800L)
#define CSR_SERVO_CNTRL_ENABLE_ADDR (CSR_BASE + 0x800L)
#define CSR_SERVO_CNTRL_ENABLE_SIZE 1
static inline uint32_t servo_cntrl_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x800L);
}
static inline void servo_cntrl_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x800L);
}
#define CSR_SERVO_CNTRL_DUTTY_ADDR (CSR_BASE + 0x804L)
#define CSR_SERVO_CNTRL_DUTTY_SIZE 1
static inline uint32_t servo_cntrl_dutty_read(void) {
	return csr_read_simple(CSR_BASE + 0x804L);
}
static inline void servo_cntrl_dutty_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x804L);
}
#define CSR_SERVO_CNTRL_PERIOD_ADDR (CSR_BASE + 0x808L)
#define CSR_SERVO_CNTRL_PERIOD_SIZE 1
static inline uint32_t servo_cntrl_period_read(void) {
	return csr_read_simple(CSR_BASE + 0x808L);
}
static inline void servo_cntrl_period_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x808L);
}

/* ultrasonido */
#define CSR_ULTRASONIDO_BASE (CSR_BASE + 0x1000L)
#define CSR_ULTRASONIDO_INIT_ADDR (CSR_BASE + 0x1000L)
#define CSR_ULTRASONIDO_INIT_SIZE 1
static inline uint32_t ultrasonido_init_read(void) {
	return csr_read_simple(CSR_BASE + 0x1000L);
}
static inline void ultrasonido_init_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x1000L);
}
#define CSR_ULTRASONIDO_TIEMPO_ADDR (CSR_BASE + 0x1004L)
#define CSR_ULTRASONIDO_TIEMPO_SIZE 1
static inline uint32_t ultrasonido_tiempo_read(void) {
	return csr_read_simple(CSR_BASE + 0x1004L);
}
#define CSR_ULTRASONIDO_DONE_ADDR (CSR_BASE + 0x1008L)
#define CSR_ULTRASONIDO_DONE_SIZE 1
static inline uint32_t ultrasonido_done_read(void) {
	return csr_read_simple(CSR_BASE + 0x1008L);
}

/* infrarojo */
#define CSR_INFRAROJO_BASE (CSR_BASE + 0x1800L)
#define CSR_INFRAROJO_IN_ADDR (CSR_BASE + 0x1800L)
#define CSR_INFRAROJO_IN_SIZE 1
static inline uint32_t infrarojo_in_read(void) {
	return csr_read_simple(CSR_BASE + 0x1800L);
}

/* motores */
#define CSR_MOTORES_BASE (CSR_BASE + 0x2000L)
#define CSR_MOTORES_MOVIMIENTO_ADDR (CSR_BASE + 0x2000L)
#define CSR_MOTORES_MOVIMIENTO_SIZE 1
static inline uint32_t motores_movimiento_read(void) {
	return csr_read_simple(CSR_BASE + 0x2000L);
}
static inline void motores_movimiento_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2000L);
}

/* VGA_Mapa */
#define CSR_VGA_MAPA_BASE (CSR_BASE + 0x2800L)
#define CSR_VGA_MAPA_FORMA_ADDR (CSR_BASE + 0x2800L)
#define CSR_VGA_MAPA_FORMA_SIZE 1
static inline uint32_t VGA_Mapa_Forma_read(void) {
	return csr_read_simple(CSR_BASE + 0x2800L);
}
#define CSR_VGA_MAPA_PROMEDIOCOLOR_ADDR (CSR_BASE + 0x2804L)
#define CSR_VGA_MAPA_PROMEDIOCOLOR_SIZE 1
static inline uint32_t VGA_Mapa_PromedioColor_read(void) {
	return csr_read_simple(CSR_BASE + 0x2804L);
}
#define CSR_VGA_MAPA_MAPADATA_ADDR (CSR_BASE + 0x2808L)
#define CSR_VGA_MAPA_MAPADATA_SIZE 1
static inline uint32_t VGA_Mapa_MapaData_read(void) {
	return csr_read_simple(CSR_BASE + 0x2808L);
}
static inline void VGA_Mapa_MapaData_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2808L);
}
#define CSR_VGA_MAPA_MAPAADDR_ADDR (CSR_BASE + 0x280cL)
#define CSR_VGA_MAPA_MAPAADDR_SIZE 1
static inline uint32_t VGA_Mapa_MapaAddr_read(void) {
	return csr_read_simple(CSR_BASE + 0x280cL);
}
static inline void VGA_Mapa_MapaAddr_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x280cL);
}
#define CSR_VGA_MAPA_MAPAWRITE_ADDR (CSR_BASE + 0x2810L)
#define CSR_VGA_MAPA_MAPAWRITE_SIZE 1
static inline uint32_t VGA_Mapa_MapaWrite_read(void) {
	return csr_read_simple(CSR_BASE + 0x2810L);
}
static inline void VGA_Mapa_MapaWrite_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x2810L);
}

/* UARTB */
#define CSR_UARTB_BASE (CSR_BASE + 0x3000L)
#define CSR_UARTB_BAUDIOS_ADDR (CSR_BASE + 0x3000L)
#define CSR_UARTB_BAUDIOS_SIZE 1
static inline uint32_t UARTB_Baudios_read(void) {
	return csr_read_simple(CSR_BASE + 0x3000L);
}
static inline void UARTB_Baudios_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3000L);
}
#define CSR_UARTB_TXINIT_ADDR (CSR_BASE + 0x3004L)
#define CSR_UARTB_TXINIT_SIZE 1
static inline uint32_t UARTB_TxInit_read(void) {
	return csr_read_simple(CSR_BASE + 0x3004L);
}
static inline void UARTB_TxInit_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3004L);
}
#define CSR_UARTB_TXDATA_ADDR (CSR_BASE + 0x3008L)
#define CSR_UARTB_TXDATA_SIZE 1
static inline uint32_t UARTB_TxData_read(void) {
	return csr_read_simple(CSR_BASE + 0x3008L);
}
static inline void UARTB_TxData_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3008L);
}
#define CSR_UARTB_RXDATA_ADDR (CSR_BASE + 0x300cL)
#define CSR_UARTB_RXDATA_SIZE 1
static inline uint32_t UARTB_RxData_read(void) {
	return csr_read_simple(CSR_BASE + 0x300cL);
}
#define CSR_UARTB_TXDONE_ADDR (CSR_BASE + 0x3010L)
#define CSR_UARTB_TXDONE_SIZE 1
static inline uint32_t UARTB_TxDone_read(void) {
	return csr_read_simple(CSR_BASE + 0x3010L);
}
#define CSR_UARTB_RXAVAILABLE_ADDR (CSR_BASE + 0x3014L)
#define CSR_UARTB_RXAVAILABLE_SIZE 1
static inline uint32_t UARTB_RxAvailable_read(void) {
	return csr_read_simple(CSR_BASE + 0x3014L);
}
#define CSR_UARTB_EV_STATUS_ADDR (CSR_BASE + 0x3018L)
#define CSR_UARTB_EV_STATUS_SIZE 1
static inline uint32_t UARTB_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x3018L);
}
#define CSR_UARTB_EV_STATUS_TXDONE_OFFSET 0
#define CSR_UARTB_EV_STATUS_TXDONE_SIZE 1
static inline uint32_t UARTB_ev_status_txdone_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t UARTB_ev_status_txdone_read(void) {
	uint32_t word = UARTB_ev_status_read();
	return UARTB_ev_status_txdone_extract(word);
}
#define CSR_UARTB_EV_STATUS_RXAVAILABLE_OFFSET 1
#define CSR_UARTB_EV_STATUS_RXAVAILABLE_SIZE 1
static inline uint32_t UARTB_ev_status_rxavailable_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t UARTB_ev_status_rxavailable_read(void) {
	uint32_t word = UARTB_ev_status_read();
	return UARTB_ev_status_rxavailable_extract(word);
}
#define CSR_UARTB_EV_PENDING_ADDR (CSR_BASE + 0x301cL)
#define CSR_UARTB_EV_PENDING_SIZE 1
static inline uint32_t UARTB_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x301cL);
}
static inline void UARTB_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x301cL);
}
#define CSR_UARTB_EV_PENDING_TXDONE_OFFSET 0
#define CSR_UARTB_EV_PENDING_TXDONE_SIZE 1
static inline uint32_t UARTB_ev_pending_txdone_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t UARTB_ev_pending_txdone_read(void) {
	uint32_t word = UARTB_ev_pending_read();
	return UARTB_ev_pending_txdone_extract(word);
}
static inline uint32_t UARTB_ev_pending_txdone_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void UARTB_ev_pending_txdone_write(uint32_t plain_value) {
	uint32_t oldword = UARTB_ev_pending_read();
	uint32_t newword = UARTB_ev_pending_txdone_replace(oldword, plain_value);
	UARTB_ev_pending_write(newword);
}
#define CSR_UARTB_EV_PENDING_RXAVAILABLE_OFFSET 1
#define CSR_UARTB_EV_PENDING_RXAVAILABLE_SIZE 1
static inline uint32_t UARTB_ev_pending_rxavailable_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t UARTB_ev_pending_rxavailable_read(void) {
	uint32_t word = UARTB_ev_pending_read();
	return UARTB_ev_pending_rxavailable_extract(word);
}
static inline uint32_t UARTB_ev_pending_rxavailable_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void UARTB_ev_pending_rxavailable_write(uint32_t plain_value) {
	uint32_t oldword = UARTB_ev_pending_read();
	uint32_t newword = UARTB_ev_pending_rxavailable_replace(oldword, plain_value);
	UARTB_ev_pending_write(newword);
}
#define CSR_UARTB_EV_ENABLE_ADDR (CSR_BASE + 0x3020L)
#define CSR_UARTB_EV_ENABLE_SIZE 1
static inline uint32_t UARTB_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x3020L);
}
static inline void UARTB_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3020L);
}
#define CSR_UARTB_EV_ENABLE_TXDONE_OFFSET 0
#define CSR_UARTB_EV_ENABLE_TXDONE_SIZE 1
static inline uint32_t UARTB_ev_enable_txdone_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t UARTB_ev_enable_txdone_read(void) {
	uint32_t word = UARTB_ev_enable_read();
	return UARTB_ev_enable_txdone_extract(word);
}
static inline uint32_t UARTB_ev_enable_txdone_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void UARTB_ev_enable_txdone_write(uint32_t plain_value) {
	uint32_t oldword = UARTB_ev_enable_read();
	uint32_t newword = UARTB_ev_enable_txdone_replace(oldword, plain_value);
	UARTB_ev_enable_write(newword);
}
#define CSR_UARTB_EV_ENABLE_RXAVAILABLE_OFFSET 1
#define CSR_UARTB_EV_ENABLE_RXAVAILABLE_SIZE 1
static inline uint32_t UARTB_ev_enable_rxavailable_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t UARTB_ev_enable_rxavailable_read(void) {
	uint32_t word = UARTB_ev_enable_read();
	return UARTB_ev_enable_rxavailable_extract(word);
}
static inline uint32_t UARTB_ev_enable_rxavailable_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void UARTB_ev_enable_rxavailable_write(uint32_t plain_value) {
	uint32_t oldword = UARTB_ev_enable_read();
	uint32_t newword = UARTB_ev_enable_rxavailable_replace(oldword, plain_value);
	UARTB_ev_enable_write(newword);
}

/* UARTA */
#define CSR_UARTA_BASE (CSR_BASE + 0x3800L)
#define CSR_UARTA_BAUDIOS_ADDR (CSR_BASE + 0x3800L)
#define CSR_UARTA_BAUDIOS_SIZE 1
static inline uint32_t UARTA_Baudios_read(void) {
	return csr_read_simple(CSR_BASE + 0x3800L);
}
static inline void UARTA_Baudios_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3800L);
}
#define CSR_UARTA_TXINIT_ADDR (CSR_BASE + 0x3804L)
#define CSR_UARTA_TXINIT_SIZE 1
static inline uint32_t UARTA_TxInit_read(void) {
	return csr_read_simple(CSR_BASE + 0x3804L);
}
static inline void UARTA_TxInit_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3804L);
}
#define CSR_UARTA_TXDATA_ADDR (CSR_BASE + 0x3808L)
#define CSR_UARTA_TXDATA_SIZE 1
static inline uint32_t UARTA_TxData_read(void) {
	return csr_read_simple(CSR_BASE + 0x3808L);
}
static inline void UARTA_TxData_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3808L);
}
#define CSR_UARTA_RXDATA_ADDR (CSR_BASE + 0x380cL)
#define CSR_UARTA_RXDATA_SIZE 1
static inline uint32_t UARTA_RxData_read(void) {
	return csr_read_simple(CSR_BASE + 0x380cL);
}
#define CSR_UARTA_TXDONE_ADDR (CSR_BASE + 0x3810L)
#define CSR_UARTA_TXDONE_SIZE 1
static inline uint32_t UARTA_TxDone_read(void) {
	return csr_read_simple(CSR_BASE + 0x3810L);
}
#define CSR_UARTA_RXAVAILABLE_ADDR (CSR_BASE + 0x3814L)
#define CSR_UARTA_RXAVAILABLE_SIZE 1
static inline uint32_t UARTA_RxAvailable_read(void) {
	return csr_read_simple(CSR_BASE + 0x3814L);
}
#define CSR_UARTA_EV_STATUS_ADDR (CSR_BASE + 0x3818L)
#define CSR_UARTA_EV_STATUS_SIZE 1
static inline uint32_t UARTA_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x3818L);
}
#define CSR_UARTA_EV_STATUS_TXDONE_OFFSET 0
#define CSR_UARTA_EV_STATUS_TXDONE_SIZE 1
static inline uint32_t UARTA_ev_status_txdone_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t UARTA_ev_status_txdone_read(void) {
	uint32_t word = UARTA_ev_status_read();
	return UARTA_ev_status_txdone_extract(word);
}
#define CSR_UARTA_EV_STATUS_RXAVAILABLE_OFFSET 1
#define CSR_UARTA_EV_STATUS_RXAVAILABLE_SIZE 1
static inline uint32_t UARTA_ev_status_rxavailable_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t UARTA_ev_status_rxavailable_read(void) {
	uint32_t word = UARTA_ev_status_read();
	return UARTA_ev_status_rxavailable_extract(word);
}
#define CSR_UARTA_EV_PENDING_ADDR (CSR_BASE + 0x381cL)
#define CSR_UARTA_EV_PENDING_SIZE 1
static inline uint32_t UARTA_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x381cL);
}
static inline void UARTA_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x381cL);
}
#define CSR_UARTA_EV_PENDING_TXDONE_OFFSET 0
#define CSR_UARTA_EV_PENDING_TXDONE_SIZE 1
static inline uint32_t UARTA_ev_pending_txdone_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t UARTA_ev_pending_txdone_read(void) {
	uint32_t word = UARTA_ev_pending_read();
	return UARTA_ev_pending_txdone_extract(word);
}
static inline uint32_t UARTA_ev_pending_txdone_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void UARTA_ev_pending_txdone_write(uint32_t plain_value) {
	uint32_t oldword = UARTA_ev_pending_read();
	uint32_t newword = UARTA_ev_pending_txdone_replace(oldword, plain_value);
	UARTA_ev_pending_write(newword);
}
#define CSR_UARTA_EV_PENDING_RXAVAILABLE_OFFSET 1
#define CSR_UARTA_EV_PENDING_RXAVAILABLE_SIZE 1
static inline uint32_t UARTA_ev_pending_rxavailable_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t UARTA_ev_pending_rxavailable_read(void) {
	uint32_t word = UARTA_ev_pending_read();
	return UARTA_ev_pending_rxavailable_extract(word);
}
static inline uint32_t UARTA_ev_pending_rxavailable_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void UARTA_ev_pending_rxavailable_write(uint32_t plain_value) {
	uint32_t oldword = UARTA_ev_pending_read();
	uint32_t newword = UARTA_ev_pending_rxavailable_replace(oldword, plain_value);
	UARTA_ev_pending_write(newword);
}
#define CSR_UARTA_EV_ENABLE_ADDR (CSR_BASE + 0x3820L)
#define CSR_UARTA_EV_ENABLE_SIZE 1
static inline uint32_t UARTA_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x3820L);
}
static inline void UARTA_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x3820L);
}
#define CSR_UARTA_EV_ENABLE_TXDONE_OFFSET 0
#define CSR_UARTA_EV_ENABLE_TXDONE_SIZE 1
static inline uint32_t UARTA_ev_enable_txdone_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t UARTA_ev_enable_txdone_read(void) {
	uint32_t word = UARTA_ev_enable_read();
	return UARTA_ev_enable_txdone_extract(word);
}
static inline uint32_t UARTA_ev_enable_txdone_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void UARTA_ev_enable_txdone_write(uint32_t plain_value) {
	uint32_t oldword = UARTA_ev_enable_read();
	uint32_t newword = UARTA_ev_enable_txdone_replace(oldword, plain_value);
	UARTA_ev_enable_write(newword);
}
#define CSR_UARTA_EV_ENABLE_RXAVAILABLE_OFFSET 1
#define CSR_UARTA_EV_ENABLE_RXAVAILABLE_SIZE 1
static inline uint32_t UARTA_ev_enable_rxavailable_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t UARTA_ev_enable_rxavailable_read(void) {
	uint32_t word = UARTA_ev_enable_read();
	return UARTA_ev_enable_rxavailable_extract(word);
}
static inline uint32_t UARTA_ev_enable_rxavailable_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void UARTA_ev_enable_rxavailable_write(uint32_t plain_value) {
	uint32_t oldword = UARTA_ev_enable_read();
	uint32_t newword = UARTA_ev_enable_rxavailable_replace(oldword, plain_value);
	UARTA_ev_enable_write(newword);
}

/* ctrl */
#define CSR_CTRL_BASE (CSR_BASE + 0x4000L)
#define CSR_CTRL_RESET_ADDR (CSR_BASE + 0x4000L)
#define CSR_CTRL_RESET_SIZE 1
static inline uint32_t ctrl_reset_read(void) {
	return csr_read_simple(CSR_BASE + 0x4000L);
}
static inline void ctrl_reset_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4000L);
}
#define CSR_CTRL_RESET_SOC_RST_OFFSET 0
#define CSR_CTRL_RESET_SOC_RST_SIZE 1
static inline uint32_t ctrl_reset_soc_rst_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t ctrl_reset_soc_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_soc_rst_extract(word);
}
static inline uint32_t ctrl_reset_soc_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void ctrl_reset_soc_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_soc_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_RESET_CPU_RST_OFFSET 1
#define CSR_CTRL_RESET_CPU_RST_SIZE 1
static inline uint32_t ctrl_reset_cpu_rst_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t ctrl_reset_cpu_rst_read(void) {
	uint32_t word = ctrl_reset_read();
	return ctrl_reset_cpu_rst_extract(word);
}
static inline uint32_t ctrl_reset_cpu_rst_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void ctrl_reset_cpu_rst_write(uint32_t plain_value) {
	uint32_t oldword = ctrl_reset_read();
	uint32_t newword = ctrl_reset_cpu_rst_replace(oldword, plain_value);
	ctrl_reset_write(newword);
}
#define CSR_CTRL_SCRATCH_ADDR (CSR_BASE + 0x4004L)
#define CSR_CTRL_SCRATCH_SIZE 1
static inline uint32_t ctrl_scratch_read(void) {
	return csr_read_simple(CSR_BASE + 0x4004L);
}
static inline void ctrl_scratch_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4004L);
}
#define CSR_CTRL_BUS_ERRORS_ADDR (CSR_BASE + 0x4008L)
#define CSR_CTRL_BUS_ERRORS_SIZE 1
static inline uint32_t ctrl_bus_errors_read(void) {
	return csr_read_simple(CSR_BASE + 0x4008L);
}

/* timer0 */
#define CSR_TIMER0_BASE (CSR_BASE + 0x4800L)
#define CSR_TIMER0_LOAD_ADDR (CSR_BASE + 0x4800L)
#define CSR_TIMER0_LOAD_SIZE 1
static inline uint32_t timer0_load_read(void) {
	return csr_read_simple(CSR_BASE + 0x4800L);
}
static inline void timer0_load_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4800L);
}
#define CSR_TIMER0_RELOAD_ADDR (CSR_BASE + 0x4804L)
#define CSR_TIMER0_RELOAD_SIZE 1
static inline uint32_t timer0_reload_read(void) {
	return csr_read_simple(CSR_BASE + 0x4804L);
}
static inline void timer0_reload_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4804L);
}
#define CSR_TIMER0_EN_ADDR (CSR_BASE + 0x4808L)
#define CSR_TIMER0_EN_SIZE 1
static inline uint32_t timer0_en_read(void) {
	return csr_read_simple(CSR_BASE + 0x4808L);
}
static inline void timer0_en_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4808L);
}
#define CSR_TIMER0_UPDATE_VALUE_ADDR (CSR_BASE + 0x480cL)
#define CSR_TIMER0_UPDATE_VALUE_SIZE 1
static inline uint32_t timer0_update_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x480cL);
}
static inline void timer0_update_value_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x480cL);
}
#define CSR_TIMER0_VALUE_ADDR (CSR_BASE + 0x4810L)
#define CSR_TIMER0_VALUE_SIZE 1
static inline uint32_t timer0_value_read(void) {
	return csr_read_simple(CSR_BASE + 0x4810L);
}
#define CSR_TIMER0_EV_STATUS_ADDR (CSR_BASE + 0x4814L)
#define CSR_TIMER0_EV_STATUS_SIZE 1
static inline uint32_t timer0_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x4814L);
}
#define CSR_TIMER0_EV_STATUS_ZERO_OFFSET 0
#define CSR_TIMER0_EV_STATUS_ZERO_SIZE 1
static inline uint32_t timer0_ev_status_zero_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_status_zero_read(void) {
	uint32_t word = timer0_ev_status_read();
	return timer0_ev_status_zero_extract(word);
}
#define CSR_TIMER0_EV_PENDING_ADDR (CSR_BASE + 0x4818L)
#define CSR_TIMER0_EV_PENDING_SIZE 1
static inline uint32_t timer0_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x4818L);
}
static inline void timer0_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x4818L);
}
#define CSR_TIMER0_EV_PENDING_ZERO_OFFSET 0
#define CSR_TIMER0_EV_PENDING_ZERO_SIZE 1
static inline uint32_t timer0_ev_pending_zero_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_pending_zero_read(void) {
	uint32_t word = timer0_ev_pending_read();
	return timer0_ev_pending_zero_extract(word);
}
static inline uint32_t timer0_ev_pending_zero_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void timer0_ev_pending_zero_write(uint32_t plain_value) {
	uint32_t oldword = timer0_ev_pending_read();
	uint32_t newword = timer0_ev_pending_zero_replace(oldword, plain_value);
	timer0_ev_pending_write(newword);
}
#define CSR_TIMER0_EV_ENABLE_ADDR (CSR_BASE + 0x481cL)
#define CSR_TIMER0_EV_ENABLE_SIZE 1
static inline uint32_t timer0_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x481cL);
}
static inline void timer0_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x481cL);
}
#define CSR_TIMER0_EV_ENABLE_ZERO_OFFSET 0
#define CSR_TIMER0_EV_ENABLE_ZERO_SIZE 1
static inline uint32_t timer0_ev_enable_zero_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t timer0_ev_enable_zero_read(void) {
	uint32_t word = timer0_ev_enable_read();
	return timer0_ev_enable_zero_extract(word);
}
static inline uint32_t timer0_ev_enable_zero_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void timer0_ev_enable_zero_write(uint32_t plain_value) {
	uint32_t oldword = timer0_ev_enable_read();
	uint32_t newword = timer0_ev_enable_zero_replace(oldword, plain_value);
	timer0_ev_enable_write(newword);
}

/* uart */
#define CSR_UART_BASE (CSR_BASE + 0x5000L)
#define CSR_UART_RXTX_ADDR (CSR_BASE + 0x5000L)
#define CSR_UART_RXTX_SIZE 1
static inline uint32_t uart_rxtx_read(void) {
	return csr_read_simple(CSR_BASE + 0x5000L);
}
static inline void uart_rxtx_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5000L);
}
#define CSR_UART_TXFULL_ADDR (CSR_BASE + 0x5004L)
#define CSR_UART_TXFULL_SIZE 1
static inline uint32_t uart_txfull_read(void) {
	return csr_read_simple(CSR_BASE + 0x5004L);
}
#define CSR_UART_RXEMPTY_ADDR (CSR_BASE + 0x5008L)
#define CSR_UART_RXEMPTY_SIZE 1
static inline uint32_t uart_rxempty_read(void) {
	return csr_read_simple(CSR_BASE + 0x5008L);
}
#define CSR_UART_EV_STATUS_ADDR (CSR_BASE + 0x500cL)
#define CSR_UART_EV_STATUS_SIZE 1
static inline uint32_t uart_ev_status_read(void) {
	return csr_read_simple(CSR_BASE + 0x500cL);
}
#define CSR_UART_EV_STATUS_TX_OFFSET 0
#define CSR_UART_EV_STATUS_TX_SIZE 1
static inline uint32_t uart_ev_status_tx_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_status_tx_read(void) {
	uint32_t word = uart_ev_status_read();
	return uart_ev_status_tx_extract(word);
}
#define CSR_UART_EV_STATUS_RX_OFFSET 1
#define CSR_UART_EV_STATUS_RX_SIZE 1
static inline uint32_t uart_ev_status_rx_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_status_rx_read(void) {
	uint32_t word = uart_ev_status_read();
	return uart_ev_status_rx_extract(word);
}
#define CSR_UART_EV_PENDING_ADDR (CSR_BASE + 0x5010L)
#define CSR_UART_EV_PENDING_SIZE 1
static inline uint32_t uart_ev_pending_read(void) {
	return csr_read_simple(CSR_BASE + 0x5010L);
}
static inline void uart_ev_pending_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5010L);
}
#define CSR_UART_EV_PENDING_TX_OFFSET 0
#define CSR_UART_EV_PENDING_TX_SIZE 1
static inline uint32_t uart_ev_pending_tx_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_pending_tx_read(void) {
	uint32_t word = uart_ev_pending_read();
	return uart_ev_pending_tx_extract(word);
}
static inline uint32_t uart_ev_pending_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void uart_ev_pending_tx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_pending_read();
	uint32_t newword = uart_ev_pending_tx_replace(oldword, plain_value);
	uart_ev_pending_write(newword);
}
#define CSR_UART_EV_PENDING_RX_OFFSET 1
#define CSR_UART_EV_PENDING_RX_SIZE 1
static inline uint32_t uart_ev_pending_rx_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_pending_rx_read(void) {
	uint32_t word = uart_ev_pending_read();
	return uart_ev_pending_rx_extract(word);
}
static inline uint32_t uart_ev_pending_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void uart_ev_pending_rx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_pending_read();
	uint32_t newword = uart_ev_pending_rx_replace(oldword, plain_value);
	uart_ev_pending_write(newword);
}
#define CSR_UART_EV_ENABLE_ADDR (CSR_BASE + 0x5014L)
#define CSR_UART_EV_ENABLE_SIZE 1
static inline uint32_t uart_ev_enable_read(void) {
	return csr_read_simple(CSR_BASE + 0x5014L);
}
static inline void uart_ev_enable_write(uint32_t v) {
	csr_write_simple(v, CSR_BASE + 0x5014L);
}
#define CSR_UART_EV_ENABLE_TX_OFFSET 0
#define CSR_UART_EV_ENABLE_TX_SIZE 1
static inline uint32_t uart_ev_enable_tx_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 0) & mask );
}
static inline uint32_t uart_ev_enable_tx_read(void) {
	uint32_t word = uart_ev_enable_read();
	return uart_ev_enable_tx_extract(word);
}
static inline uint32_t uart_ev_enable_tx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 0))) | (mask & plain_value)<< 0 ;
}
static inline void uart_ev_enable_tx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_enable_read();
	uint32_t newword = uart_ev_enable_tx_replace(oldword, plain_value);
	uart_ev_enable_write(newword);
}
#define CSR_UART_EV_ENABLE_RX_OFFSET 1
#define CSR_UART_EV_ENABLE_RX_SIZE 1
static inline uint32_t uart_ev_enable_rx_extract(uint32_t oldword) {
	uint32_t mask = ((1 << 1)-1);
	return ( (oldword >> 1) & mask );
}
static inline uint32_t uart_ev_enable_rx_read(void) {
	uint32_t word = uart_ev_enable_read();
	return uart_ev_enable_rx_extract(word);
}
static inline uint32_t uart_ev_enable_rx_replace(uint32_t oldword, uint32_t plain_value) {
	uint32_t mask = ((1 << 1)-1);
	return (oldword & (~(mask << 1))) | (mask & plain_value)<< 1 ;
}
static inline void uart_ev_enable_rx_write(uint32_t plain_value) {
	uint32_t oldword = uart_ev_enable_read();
	uint32_t newword = uart_ev_enable_rx_replace(oldword, plain_value);
	uart_ev_enable_write(newword);
}
#define CSR_UART_TXEMPTY_ADDR (CSR_BASE + 0x5018L)
#define CSR_UART_TXEMPTY_SIZE 1
static inline uint32_t uart_txempty_read(void) {
	return csr_read_simple(CSR_BASE + 0x5018L);
}
#define CSR_UART_RXFULL_ADDR (CSR_BASE + 0x501cL)
#define CSR_UART_RXFULL_SIZE 1
static inline uint32_t uart_rxfull_read(void) {
	return csr_read_simple(CSR_BASE + 0x501cL);
}

#endif
